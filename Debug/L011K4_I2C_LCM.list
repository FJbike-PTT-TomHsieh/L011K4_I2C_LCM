
L011K4_I2C_LCM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002db8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002e78  08002e78  00012e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e94  08002e94  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e94  08002e94  00012e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e9c  08002e9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e9c  08002e9c  00012e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ea0  08002ea0  00012ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08002eb0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002eb0  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000085d9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae0  00000000  00000000  0002860d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0002a0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002a8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fc2e  00000000  00000000  0002af68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a958  00000000  00000000  0003ab96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005cb9d  00000000  00000000  000454ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a208b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a20  00000000  00000000  000a20e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e60 	.word	0x08002e60

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002e60 	.word	0x08002e60

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <I2C_Slave_Task>:
#include "I2C_Task.h"
#include "LCM_Task.h"

// I2C slave task.
void I2C_Slave_Task( void )
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
	uint32_t temp;

	// Check address match interrupt flag bit.
	temp = I2C1->ISR;
 80004a2:	4b2e      	ldr	r3, [pc, #184]	; (800055c <I2C_Slave_Task+0xc0>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	607b      	str	r3, [r7, #4]
	temp &= 0x00000008;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2208      	movs	r2, #8
 80004ac:	4013      	ands	r3, r2
 80004ae:	607b      	str	r3, [r7, #4]
	if( temp == 0x00000008 )
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2b08      	cmp	r3, #8
 80004b4:	d108      	bne.n	80004c8 <I2C_Slave_Task+0x2c>
	{
		// Address match.
		// Clear interrupt flag bit.
		I2C1->ICR = 0x00000008;
 80004b6:	4b29      	ldr	r3, [pc, #164]	; (800055c <I2C_Slave_Task+0xc0>)
 80004b8:	2208      	movs	r2, #8
 80004ba:	61da      	str	r2, [r3, #28]
		// Clear received count.
		i2c_rec_cnt = 0;
 80004bc:	4b28      	ldr	r3, [pc, #160]	; (8000560 <I2C_Slave_Task+0xc4>)
 80004be:	2200      	movs	r2, #0
 80004c0:	701a      	strb	r2, [r3, #0]
		// Clear LCM update count.
		lcm_text_cnt = 0;
 80004c2:	4b28      	ldr	r3, [pc, #160]	; (8000564 <I2C_Slave_Task+0xc8>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	701a      	strb	r2, [r3, #0]
	}

	// Stop interrupt check.
	temp = I2C1->ISR;
 80004c8:	4b24      	ldr	r3, [pc, #144]	; (800055c <I2C_Slave_Task+0xc0>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	607b      	str	r3, [r7, #4]
	temp &= 0x00000020;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2220      	movs	r2, #32
 80004d2:	4013      	ands	r3, r2
 80004d4:	607b      	str	r3, [r7, #4]
	if( temp == 0x00000020  )
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2b20      	cmp	r3, #32
 80004da:	d10a      	bne.n	80004f2 <I2C_Slave_Task+0x56>
	{
		// Clear interrupt flag bit.
		I2C1->ICR = 0x00000020;
 80004dc:	4b1f      	ldr	r3, [pc, #124]	; (800055c <I2C_Slave_Task+0xc0>)
 80004de:	2220      	movs	r2, #32
 80004e0:	61da      	str	r2, [r3, #28]
		// Set LCM update count.
		lcm_text_cnt = i2c_rec_cnt;
 80004e2:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <I2C_Slave_Task+0xc4>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	b2da      	uxtb	r2, r3
 80004e8:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <I2C_Slave_Task+0xc8>)
 80004ea:	701a      	strb	r2, [r3, #0]
		// Reset LCM task count.
		lcm_task_cnt = 0;
 80004ec:	4b1e      	ldr	r3, [pc, #120]	; (8000568 <I2C_Slave_Task+0xcc>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	701a      	strb	r2, [r3, #0]
	}

	// RXNE interrupt check.
	temp = I2C1->ISR;
 80004f2:	4b1a      	ldr	r3, [pc, #104]	; (800055c <I2C_Slave_Task+0xc0>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	607b      	str	r3, [r7, #4]
	temp &= 0x00000004;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2204      	movs	r2, #4
 80004fc:	4013      	ands	r3, r2
 80004fe:	607b      	str	r3, [r7, #4]
	if( temp == 0x00000004 )
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2b04      	cmp	r3, #4
 8000504:	d125      	bne.n	8000552 <I2C_Slave_Task+0xb6>
	{
		// Receive data from master.
		// Clear interrupt flag bit.
		I2C1->ICR = 0x00000004;
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <I2C_Slave_Task+0xc0>)
 8000508:	2204      	movs	r2, #4
 800050a:	61da      	str	r2, [r3, #28]

		// Keep received data, and clear interrupt flag bit.
		lcm_text[ i2c_rec_cnt ] = I2C1->RXDR;
 800050c:	4b13      	ldr	r3, [pc, #76]	; (800055c <I2C_Slave_Task+0xc0>)
 800050e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000510:	4b13      	ldr	r3, [pc, #76]	; (8000560 <I2C_Slave_Task+0xc4>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	b2db      	uxtb	r3, r3
 8000516:	001a      	movs	r2, r3
 8000518:	b2c9      	uxtb	r1, r1
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <I2C_Slave_Task+0xd0>)
 800051c:	5499      	strb	r1, [r3, r2]
		// From received next data.
		if(i2c_rec_cnt < 16  )
 800051e:	4b10      	ldr	r3, [pc, #64]	; (8000560 <I2C_Slave_Task+0xc4>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	2b0f      	cmp	r3, #15
 8000526:	d80d      	bhi.n	8000544 <I2C_Slave_Task+0xa8>
		{
			// Increase count.
			++i2c_rec_cnt;
 8000528:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <I2C_Slave_Task+0xc4>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	3301      	adds	r3, #1
 8000530:	b2da      	uxtb	r2, r3
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <I2C_Slave_Task+0xc4>)
 8000534:	701a      	strb	r2, [r3, #0]
			// Return ACK.
			I2C1->CR2 &= 0xffffefff;
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <I2C_Slave_Task+0xc0>)
 8000538:	685a      	ldr	r2, [r3, #4]
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <I2C_Slave_Task+0xc0>)
 800053c:	490c      	ldr	r1, [pc, #48]	; (8000570 <I2C_Slave_Task+0xd4>)
 800053e:	400a      	ands	r2, r1
 8000540:	605a      	str	r2, [r3, #4]
			I2C1->CR2 |= 0x00008000;
		}

	}

}
 8000542:	e006      	b.n	8000552 <I2C_Slave_Task+0xb6>
			I2C1->CR2 |= 0x00008000;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <I2C_Slave_Task+0xc0>)
 8000546:	685a      	ldr	r2, [r3, #4]
 8000548:	4b04      	ldr	r3, [pc, #16]	; (800055c <I2C_Slave_Task+0xc0>)
 800054a:	2180      	movs	r1, #128	; 0x80
 800054c:	0209      	lsls	r1, r1, #8
 800054e:	430a      	orrs	r2, r1
 8000550:	605a      	str	r2, [r3, #4]
}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	b002      	add	sp, #8
 8000558:	bd80      	pop	{r7, pc}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	40005400 	.word	0x40005400
 8000560:	20000069 	.word	0x20000069
 8000564:	20000041 	.word	0x20000041
 8000568:	20000068 	.word	0x20000068
 800056c:	20000028 	.word	0x20000028
 8000570:	ffffefff 	.word	0xffffefff

08000574 <LCM_Init>:
#include "LCM_Task.h"
#include "I2C_Task.h"

// LCM initialize.
void LCM_Init( void )
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	// Power on delay.
	// - ABout 100ms.
	lcm_delay = 10;
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <LCM_Init+0x50>)
 800057a:	220a      	movs	r2, #10
 800057c:	601a      	str	r2, [r3, #0]
	while( lcm_delay )
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <LCM_Init+0x50>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d1fb      	bne.n	8000580 <LCM_Init+0xc>
	}
	// Output low.
	// RS - PA8.
	// RW - PA9.
	// E - PA10.
	GPIOA->BSRR = 0x07000000;
 8000588:	23a0      	movs	r3, #160	; 0xa0
 800058a:	05db      	lsls	r3, r3, #23
 800058c:	22e0      	movs	r2, #224	; 0xe0
 800058e:	04d2      	lsls	r2, r2, #19
 8000590:	619a      	str	r2, [r3, #24]
	// Function.
	// - 2 line.
	// - 5 x 7 dots a word.
	// - 8 bit data.
	LCM_Cmd_Out( 0x38 );
 8000592:	2038      	movs	r0, #56	; 0x38
 8000594:	f000 f818 	bl	80005c8 <LCM_Cmd_Out>
	LCM_Cmd_Out( 0x38 );
 8000598:	2038      	movs	r0, #56	; 0x38
 800059a:	f000 f815 	bl	80005c8 <LCM_Cmd_Out>
	LCM_Cmd_Out( 0x38 );
 800059e:	2038      	movs	r0, #56	; 0x38
 80005a0:	f000 f812 	bl	80005c8 <LCM_Cmd_Out>
	LCM_Cmd_Out( 0x38 );
 80005a4:	2038      	movs	r0, #56	; 0x38
 80005a6:	f000 f80f 	bl	80005c8 <LCM_Cmd_Out>
	// Display.
	// - Display on.
	// - Cursor off.
	LCM_Cmd_Out( 0x0c );
 80005aa:	200c      	movs	r0, #12
 80005ac:	f000 f80c 	bl	80005c8 <LCM_Cmd_Out>
	// Entry.
	// - Increment.
	LCM_Cmd_Out( 0x06 );
 80005b0:	2006      	movs	r0, #6
 80005b2:	f000 f809 	bl	80005c8 <LCM_Cmd_Out>
	// Display clear.
	LCM_Cmd_Out( 0x01 );
 80005b6:	2001      	movs	r0, #1
 80005b8:	f000 f806 	bl	80005c8 <LCM_Cmd_Out>

	// Test only.
	//LCM_Data_Out( 'A' );
}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	2000003c 	.word	0x2000003c

080005c8 <LCM_Cmd_Out>:

// LCM command out.
void LCM_Cmd_Out( uint8_t cmd )
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	0002      	movs	r2, r0
 80005d0:	1dfb      	adds	r3, r7, #7
 80005d2:	701a      	strb	r2, [r3, #0]
	GPIOA->BSRR = 0x01000000; 	// RS = 0.
 80005d4:	23a0      	movs	r3, #160	; 0xa0
 80005d6:	05db      	lsls	r3, r3, #23
 80005d8:	2280      	movs	r2, #128	; 0x80
 80005da:	0452      	lsls	r2, r2, #17
 80005dc:	619a      	str	r2, [r3, #24]
	GPIOA->BSRR = 0x02000000; 	// RW = 0.
 80005de:	23a0      	movs	r3, #160	; 0xa0
 80005e0:	05db      	lsls	r3, r3, #23
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	0492      	lsls	r2, r2, #18
 80005e6:	619a      	str	r2, [r3, #24]
	__NOP();
 80005e8:	46c0      	nop			; (mov r8, r8)
	GPIOA->BSRR = 0x00000400; 	// E = 1.
 80005ea:	23a0      	movs	r3, #160	; 0xa0
 80005ec:	05db      	lsls	r3, r3, #23
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	00d2      	lsls	r2, r2, #3
 80005f2:	619a      	str	r2, [r3, #24]
	GPIOA->BSRR = 0x00ff0000;
 80005f4:	23a0      	movs	r3, #160	; 0xa0
 80005f6:	05db      	lsls	r3, r3, #23
 80005f8:	22ff      	movs	r2, #255	; 0xff
 80005fa:	0412      	lsls	r2, r2, #16
 80005fc:	619a      	str	r2, [r3, #24]
	GPIOA->BSRR = cmd;			// LCM command.
 80005fe:	23a0      	movs	r3, #160	; 0xa0
 8000600:	05db      	lsls	r3, r3, #23
 8000602:	1dfa      	adds	r2, r7, #7
 8000604:	7812      	ldrb	r2, [r2, #0]
 8000606:	619a      	str	r2, [r3, #24]
	__NOP();
 8000608:	46c0      	nop			; (mov r8, r8)
	__NOP();
 800060a:	46c0      	nop			; (mov r8, r8)
	__NOP();
 800060c:	46c0      	nop			; (mov r8, r8)
	__NOP();
 800060e:	46c0      	nop			; (mov r8, r8)
	GPIOA->BSRR = 0x04000000; 	// E = 0;
 8000610:	23a0      	movs	r3, #160	; 0xa0
 8000612:	05db      	lsls	r3, r3, #23
 8000614:	2280      	movs	r2, #128	; 0x80
 8000616:	04d2      	lsls	r2, r2, #19
 8000618:	619a      	str	r2, [r3, #24]
	__NOP();
 800061a:	46c0      	nop			; (mov r8, r8)
	GPIOA->BSRR = 0x00000200; 	// RW = 1.
 800061c:	23a0      	movs	r3, #160	; 0xa0
 800061e:	05db      	lsls	r3, r3, #23
 8000620:	2280      	movs	r2, #128	; 0x80
 8000622:	0092      	lsls	r2, r2, #2
 8000624:	619a      	str	r2, [r3, #24]
	GPIOA->BSRR = 0x00000100; 	// RS = 1.
 8000626:	23a0      	movs	r3, #160	; 0xa0
 8000628:	05db      	lsls	r3, r3, #23
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	0052      	lsls	r2, r2, #1
 800062e:	619a      	str	r2, [r3, #24]

	lcm_delay = 2;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <LCM_Cmd_Out+0x84>)
 8000632:	2202      	movs	r2, #2
 8000634:	601a      	str	r2, [r3, #0]
	// Block wait.
	while( lcm_delay )
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <LCM_Cmd_Out+0x84>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1fb      	bne.n	8000638 <LCM_Cmd_Out+0x70>
	{
	}
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	b002      	add	sp, #8
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	2000003c 	.word	0x2000003c

08000650 <LCM_Data_Out>:

// LCM data out.
void LCM_Data_Out( uint8_t data )
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	0002      	movs	r2, r0
 8000658:	1dfb      	adds	r3, r7, #7
 800065a:	701a      	strb	r2, [r3, #0]
	GPIOA->BSRR = 0x00000100; 	// RS = 1.
 800065c:	23a0      	movs	r3, #160	; 0xa0
 800065e:	05db      	lsls	r3, r3, #23
 8000660:	2280      	movs	r2, #128	; 0x80
 8000662:	0052      	lsls	r2, r2, #1
 8000664:	619a      	str	r2, [r3, #24]
	GPIOA->BSRR = 0x02000000; 	// RW = 0.
 8000666:	23a0      	movs	r3, #160	; 0xa0
 8000668:	05db      	lsls	r3, r3, #23
 800066a:	2280      	movs	r2, #128	; 0x80
 800066c:	0492      	lsls	r2, r2, #18
 800066e:	619a      	str	r2, [r3, #24]
	__NOP();
 8000670:	46c0      	nop			; (mov r8, r8)
	GPIOA->BSRR = 0x00000400; 	// E = 1.
 8000672:	23a0      	movs	r3, #160	; 0xa0
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	2280      	movs	r2, #128	; 0x80
 8000678:	00d2      	lsls	r2, r2, #3
 800067a:	619a      	str	r2, [r3, #24]
	GPIOA->BSRR = 0x00ff0000;
 800067c:	23a0      	movs	r3, #160	; 0xa0
 800067e:	05db      	lsls	r3, r3, #23
 8000680:	22ff      	movs	r2, #255	; 0xff
 8000682:	0412      	lsls	r2, r2, #16
 8000684:	619a      	str	r2, [r3, #24]
	GPIOA->BSRR = data;			// LCM data.
 8000686:	23a0      	movs	r3, #160	; 0xa0
 8000688:	05db      	lsls	r3, r3, #23
 800068a:	1dfa      	adds	r2, r7, #7
 800068c:	7812      	ldrb	r2, [r2, #0]
 800068e:	619a      	str	r2, [r3, #24]
	__NOP();
 8000690:	46c0      	nop			; (mov r8, r8)
	__NOP();
 8000692:	46c0      	nop			; (mov r8, r8)
	__NOP();
 8000694:	46c0      	nop			; (mov r8, r8)
	__NOP();
 8000696:	46c0      	nop			; (mov r8, r8)
	GPIOA->BSRR = 0x04000000; 	// E = 0;
 8000698:	23a0      	movs	r3, #160	; 0xa0
 800069a:	05db      	lsls	r3, r3, #23
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	04d2      	lsls	r2, r2, #19
 80006a0:	619a      	str	r2, [r3, #24]
	__NOP();
 80006a2:	46c0      	nop			; (mov r8, r8)
	GPIOA->BSRR = 0x00000200; 	// RW = 1.
 80006a4:	23a0      	movs	r3, #160	; 0xa0
 80006a6:	05db      	lsls	r3, r3, #23
 80006a8:	2280      	movs	r2, #128	; 0x80
 80006aa:	0092      	lsls	r2, r2, #2
 80006ac:	619a      	str	r2, [r3, #24]
	GPIOA->BSRR = 0x00000100; 	// RS = 1.
 80006ae:	23a0      	movs	r3, #160	; 0xa0
 80006b0:	05db      	lsls	r3, r3, #23
 80006b2:	2280      	movs	r2, #128	; 0x80
 80006b4:	0052      	lsls	r2, r2, #1
 80006b6:	619a      	str	r2, [r3, #24]

	lcm_delay = 2;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <LCM_Data_Out+0x84>)
 80006ba:	2202      	movs	r2, #2
 80006bc:	601a      	str	r2, [r3, #0]
	// Block wait.
	while( lcm_delay )
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <LCM_Data_Out+0x84>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d1fb      	bne.n	80006c0 <LCM_Data_Out+0x70>
	{
	}
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b002      	add	sp, #8
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	2000003c 	.word	0x2000003c

080006d8 <LCM_Task>:

// LCM task.
void LCM_Task( void )
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
	uint8_t temp1;
	uint8_t temp3;

	// Delay count check.
	if( lcm_delay )
 80006de:	4b40      	ldr	r3, [pc, #256]	; (80007e0 <LCM_Task+0x108>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d000      	beq.n	80006e8 <LCM_Task+0x10>
 80006e6:	e073      	b.n	80007d0 <LCM_Task+0xf8>
		// Not done.
		return;
	}

	// Check text draw count.
	if( lcm_text_cnt == 0 )
 80006e8:	4b3e      	ldr	r3, [pc, #248]	; (80007e4 <LCM_Task+0x10c>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d100      	bne.n	80006f4 <LCM_Task+0x1c>
 80006f2:	e06f      	b.n	80007d4 <LCM_Task+0xfc>
	{
		// Empty, do not draw.
		return;
	}

	switch( lcm_task_cnt )
 80006f4:	4b3c      	ldr	r3, [pc, #240]	; (80007e8 <LCM_Task+0x110>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	d061      	beq.n	80007c2 <LCM_Task+0xea>
 80006fe:	dd00      	ble.n	8000702 <LCM_Task+0x2a>
 8000700:	e06b      	b.n	80007da <LCM_Task+0x102>
 8000702:	2b02      	cmp	r3, #2
 8000704:	d01b      	beq.n	800073e <LCM_Task+0x66>
 8000706:	dc68      	bgt.n	80007da <LCM_Task+0x102>
 8000708:	2b00      	cmp	r3, #0
 800070a:	d002      	beq.n	8000712 <LCM_Task+0x3a>
 800070c:	2b01      	cmp	r3, #1
 800070e:	d00b      	beq.n	8000728 <LCM_Task+0x50>
 8000710:	e063      	b.n	80007da <LCM_Task+0x102>
	{
		case 0:
			// Clear index.
			lcm_text_index = 0;
 8000712:	4b36      	ldr	r3, [pc, #216]	; (80007ec <LCM_Task+0x114>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
			// Next task.
			++lcm_task_cnt;
 8000718:	4b33      	ldr	r3, [pc, #204]	; (80007e8 <LCM_Task+0x110>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	3301      	adds	r3, #1
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <LCM_Task+0x110>)
 8000724:	701a      	strb	r2, [r3, #0]
			break;
 8000726:	e058      	b.n	80007da <LCM_Task+0x102>

		case 1:
			// Cursor return home.
			LCM_Cmd_Out( 0x02 );
 8000728:	2002      	movs	r0, #2
 800072a:	f7ff ff4d 	bl	80005c8 <LCM_Cmd_Out>
			// Next task.
			++lcm_task_cnt;
 800072e:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <LCM_Task+0x110>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b2db      	uxtb	r3, r3
 8000734:	3301      	adds	r3, #1
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <LCM_Task+0x110>)
 800073a:	701a      	strb	r2, [r3, #0]
			break;
 800073c:	e04d      	b.n	80007da <LCM_Task+0x102>

		case 2:
			// Send display data.
			temp1 = lcm_text_old[ lcm_text_index ];
 800073e:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <LCM_Task+0x114>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	0019      	movs	r1, r3
 8000746:	1dfb      	adds	r3, r7, #7
 8000748:	4a29      	ldr	r2, [pc, #164]	; (80007f0 <LCM_Task+0x118>)
 800074a:	5c52      	ldrb	r2, [r2, r1]
 800074c:	701a      	strb	r2, [r3, #0]
			temp3 = lcm_text[ lcm_text_index ];
 800074e:	4b27      	ldr	r3, [pc, #156]	; (80007ec <LCM_Task+0x114>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	0019      	movs	r1, r3
 8000756:	1dbb      	adds	r3, r7, #6
 8000758:	4a26      	ldr	r2, [pc, #152]	; (80007f4 <LCM_Task+0x11c>)
 800075a:	5c52      	ldrb	r2, [r2, r1]
 800075c:	701a      	strb	r2, [r3, #0]
			// Display data Change, show new data.
			if( temp3 != temp1 )
 800075e:	1dba      	adds	r2, r7, #6
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	7812      	ldrb	r2, [r2, #0]
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	429a      	cmp	r2, r3
 8000768:	d00d      	beq.n	8000786 <LCM_Task+0xae>
			{
				// Keep current data as old data.
				lcm_text_old[ lcm_text_index ] = temp3;
 800076a:	4b20      	ldr	r3, [pc, #128]	; (80007ec <LCM_Task+0x114>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	0019      	movs	r1, r3
 8000772:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <LCM_Task+0x118>)
 8000774:	1dba      	adds	r2, r7, #6
 8000776:	7812      	ldrb	r2, [r2, #0]
 8000778:	545a      	strb	r2, [r3, r1]

				LCM_Data_Out( temp3 );
 800077a:	1dbb      	adds	r3, r7, #6
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	0018      	movs	r0, r3
 8000780:	f7ff ff66 	bl	8000650 <LCM_Data_Out>
 8000784:	e002      	b.n	800078c <LCM_Task+0xb4>
			}
			else
			{
				LCM_Cmd_Out( 0x14 );
 8000786:	2014      	movs	r0, #20
 8000788:	f7ff ff1e 	bl	80005c8 <LCM_Cmd_Out>
			}

			// Next data.
			++lcm_text_index;
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <LCM_Task+0x114>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	3301      	adds	r3, #1
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <LCM_Task+0x114>)
 8000798:	701a      	strb	r2, [r3, #0]
			--lcm_text_cnt;
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <LCM_Task+0x10c>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	3b01      	subs	r3, #1
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <LCM_Task+0x10c>)
 80007a6:	701a      	strb	r2, [r3, #0]

			// Line carry.
			if( lcm_text_index == LINE_WORD )
 80007a8:	4b10      	ldr	r3, [pc, #64]	; (80007ec <LCM_Task+0x114>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	2b08      	cmp	r3, #8
 80007b0:	d112      	bne.n	80007d8 <LCM_Task+0x100>
			{
				// Next task.
				++lcm_task_cnt;
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <LCM_Task+0x110>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	3301      	adds	r3, #1
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <LCM_Task+0x110>)
 80007be:	701a      	strb	r2, [r3, #0]
			}
			break;
 80007c0:	e00a      	b.n	80007d8 <LCM_Task+0x100>

		case 3:
			// Cursor return home.
			LCM_Cmd_Out( 0xc0 );
 80007c2:	20c0      	movs	r0, #192	; 0xc0
 80007c4:	f7ff ff00 	bl	80005c8 <LCM_Cmd_Out>
			// Next task.
			lcm_task_cnt = 2;
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <LCM_Task+0x110>)
 80007ca:	2202      	movs	r2, #2
 80007cc:	701a      	strb	r2, [r3, #0]
			break;
 80007ce:	e004      	b.n	80007da <LCM_Task+0x102>
		return;
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	e002      	b.n	80007da <LCM_Task+0x102>
		return;
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	e000      	b.n	80007da <LCM_Task+0x102>
			break;
 80007d8:	46c0      	nop			; (mov r8, r8)
	}
}
 80007da:	46bd      	mov	sp, r7
 80007dc:	b002      	add	sp, #8
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000003c 	.word	0x2000003c
 80007e4:	20000041 	.word	0x20000041
 80007e8:	20000068 	.word	0x20000068
 80007ec:	20000040 	.word	0x20000040
 80007f0:	20000058 	.word	0x20000058
 80007f4:	20000028 	.word	0x20000028

080007f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	0002      	movs	r2, r0
 8000800:	1dfb      	adds	r3, r7, #7
 8000802:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000804:	1dfb      	adds	r3, r7, #7
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b7f      	cmp	r3, #127	; 0x7f
 800080a:	d809      	bhi.n	8000820 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800080c:	1dfb      	adds	r3, r7, #7
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	001a      	movs	r2, r3
 8000812:	231f      	movs	r3, #31
 8000814:	401a      	ands	r2, r3
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <__NVIC_EnableIRQ+0x30>)
 8000818:	2101      	movs	r1, #1
 800081a:	4091      	lsls	r1, r2
 800081c:	000a      	movs	r2, r1
 800081e:	601a      	str	r2, [r3, #0]
  }
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	b002      	add	sp, #8
 8000826:	bd80      	pop	{r7, pc}
 8000828:	e000e100 	.word	0xe000e100

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000830:	f000 fa06 	bl	8000c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000834:	f000 f80a 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000838:	f000 f8d2 	bl	80009e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800083c:	f000 f878 	bl	8000930 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  //
  LCM_Init();
 8000840:	f7ff fe98 	bl	8000574 <LCM_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // LCM update task.
	  LCM_Task();
 8000844:	f7ff ff48 	bl	80006d8 <LCM_Task>
 8000848:	e7fc      	b.n	8000844 <main+0x18>
	...

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b099      	sub	sp, #100	; 0x64
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	242c      	movs	r4, #44	; 0x2c
 8000854:	193b      	adds	r3, r7, r4
 8000856:	0018      	movs	r0, r3
 8000858:	2334      	movs	r3, #52	; 0x34
 800085a:	001a      	movs	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f002 faf7 	bl	8002e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000862:	2318      	movs	r3, #24
 8000864:	18fb      	adds	r3, r7, r3
 8000866:	0018      	movs	r0, r3
 8000868:	2314      	movs	r3, #20
 800086a:	001a      	movs	r2, r3
 800086c:	2100      	movs	r1, #0
 800086e:	f002 faef 	bl	8002e50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000872:	003b      	movs	r3, r7
 8000874:	0018      	movs	r0, r3
 8000876:	2318      	movs	r3, #24
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f002 fae8 	bl	8002e50 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000880:	4b29      	ldr	r3, [pc, #164]	; (8000928 <SystemClock_Config+0xdc>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a29      	ldr	r2, [pc, #164]	; (800092c <SystemClock_Config+0xe0>)
 8000886:	401a      	ands	r2, r3
 8000888:	4b27      	ldr	r3, [pc, #156]	; (8000928 <SystemClock_Config+0xdc>)
 800088a:	2180      	movs	r1, #128	; 0x80
 800088c:	0109      	lsls	r1, r1, #4
 800088e:	430a      	orrs	r2, r1
 8000890:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000892:	0021      	movs	r1, r4
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2202      	movs	r2, #2
 8000898:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2201      	movs	r2, #1
 800089e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2210      	movs	r2, #16
 80008a4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2202      	movs	r2, #2
 80008aa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2200      	movs	r2, #0
 80008b0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2200      	movs	r2, #0
 80008b6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	03d2      	lsls	r2, r2, #15
 80008be:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	0018      	movs	r0, r3
 80008c4:	f001 fc10 	bl	80020e8 <HAL_RCC_OscConfig>
 80008c8:	1e03      	subs	r3, r0, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008cc:	f000 f8ce 	bl	8000a6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d0:	2118      	movs	r1, #24
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	220f      	movs	r2, #15
 80008d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2203      	movs	r2, #3
 80008dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2101      	movs	r1, #1
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 ff73 	bl	80027e0 <HAL_RCC_ClockConfig>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80008fe:	f000 f8b5 	bl	8000a6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000902:	003b      	movs	r3, r7
 8000904:	2208      	movs	r2, #8
 8000906:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000908:	003b      	movs	r3, r7
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090e:	003b      	movs	r3, r7
 8000910:	0018      	movs	r0, r3
 8000912:	f002 f953 	bl	8002bbc <HAL_RCCEx_PeriphCLKConfig>
 8000916:	1e03      	subs	r3, r0, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800091a:	f000 f8a7 	bl	8000a6c <Error_Handler>
  }
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b019      	add	sp, #100	; 0x64
 8000924:	bd90      	pop	{r4, r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	40007000 	.word	0x40007000
 800092c:	ffffe7ff 	.word	0xffffe7ff

08000930 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

	__HAL_RCC_I2C1_CLK_ENABLE();
 8000934:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <MX_I2C1_Init+0xa0>)
 8000936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000938:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <MX_I2C1_Init+0xa0>)
 800093a:	2180      	movs	r1, #128	; 0x80
 800093c:	0389      	lsls	r1, r1, #14
 800093e:	430a      	orrs	r2, r1
 8000940:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000942:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <MX_I2C1_Init+0xa4>)
 8000944:	4a24      	ldr	r2, [pc, #144]	; (80009d8 <MX_I2C1_Init+0xa8>)
 8000946:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8000948:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <MX_I2C1_Init+0xa4>)
 800094a:	4a24      	ldr	r2, [pc, #144]	; (80009dc <MX_I2C1_Init+0xac>)
 800094c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 112;
 800094e:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <MX_I2C1_Init+0xa4>)
 8000950:	2270      	movs	r2, #112	; 0x70
 8000952:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000954:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MX_I2C1_Init+0xa4>)
 8000956:	2201      	movs	r2, #1
 8000958:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800095a:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <MX_I2C1_Init+0xa4>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000960:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_I2C1_Init+0xa4>)
 8000962:	2200      	movs	r2, #0
 8000964:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000966:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_I2C1_Init+0xa4>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_I2C1_Init+0xa4>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_I2C1_Init+0xa4>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_I2C1_Init+0xa4>)
 800097a:	0018      	movs	r0, r3
 800097c:	f000 fc86 	bl	800128c <HAL_I2C_Init>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <MX_I2C1_Init+0x58>
  {
    Error_Handler();
 8000984:	f000 f872 	bl	8000a6c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_I2C1_Init+0xa4>)
 800098a:	2100      	movs	r1, #0
 800098c:	0018      	movs	r0, r3
 800098e:	f001 fb13 	bl	8001fb8 <HAL_I2CEx_ConfigAnalogFilter>
 8000992:	1e03      	subs	r3, r0, #0
 8000994:	d001      	beq.n	800099a <MX_I2C1_Init+0x6a>
  {
    Error_Handler();
 8000996:	f000 f869 	bl	8000a6c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_I2C1_Init+0xa4>)
 800099c:	2100      	movs	r1, #0
 800099e:	0018      	movs	r0, r3
 80009a0:	f001 fb56 	bl	8002050 <HAL_I2CEx_ConfigDigitalFilter>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <MX_I2C1_Init+0x7c>
  {
    Error_Handler();
 80009a8:	f000 f860 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  // Stop, ADDR, RXNE interrupt enable.
  I2C1->CR1 |= 0x0000002c;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <MX_I2C1_Init+0xa8>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_I2C1_Init+0xa8>)
 80009b2:	212c      	movs	r1, #44	; 0x2c
 80009b4:	430a      	orrs	r2, r1
 80009b6:	601a      	str	r2, [r3, #0]
  // Enable IRQ.
  NVIC_EnableIRQ( I2C1_IRQn );
 80009b8:	2017      	movs	r0, #23
 80009ba:	f7ff ff1d 	bl	80007f8 <__NVIC_EnableIRQ>
  // Enable I2C.
  I2C1->CR1 |= 0x00000001;
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_I2C1_Init+0xa8>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <MX_I2C1_Init+0xa8>)
 80009c4:	2101      	movs	r1, #1
 80009c6:	430a      	orrs	r2, r1
 80009c8:	601a      	str	r2, [r3, #0]

  /* USER CODE END I2C1_Init 2 */

}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40021000 	.word	0x40021000
 80009d4:	2000006c 	.word	0x2000006c
 80009d8:	40005400 	.word	0x40005400
 80009dc:	00506682 	.word	0x00506682

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b089      	sub	sp, #36	; 0x24
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	240c      	movs	r4, #12
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	0018      	movs	r0, r3
 80009ec:	2314      	movs	r3, #20
 80009ee:	001a      	movs	r2, r3
 80009f0:	2100      	movs	r1, #0
 80009f2:	f002 fa2d 	bl	8002e50 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_GPIO_Init+0x84>)
 80009f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_GPIO_Init+0x84>)
 80009fc:	2101      	movs	r1, #1
 80009fe:	430a      	orrs	r2, r1
 8000a00:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_GPIO_Init+0x84>)
 8000a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a06:	2201      	movs	r2, #1
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_GPIO_Init+0x84>)
 8000a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_GPIO_Init+0x84>)
 8000a14:	2102      	movs	r1, #2
 8000a16:	430a      	orrs	r2, r1
 8000a18:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a1a:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_GPIO_Init+0x84>)
 8000a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1e:	2202      	movs	r2, #2
 8000a20:	4013      	ands	r3, r2
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a26:	4910      	ldr	r1, [pc, #64]	; (8000a68 <MX_GPIO_Init+0x88>)
 8000a28:	23a0      	movs	r3, #160	; 0xa0
 8000a2a:	05db      	lsls	r3, r3, #23
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f000 fc0e 	bl	8001250 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a34:	0021      	movs	r1, r4
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <MX_GPIO_Init+0x88>)
 8000a3a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2201      	movs	r2, #1
 8000a40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	187a      	adds	r2, r7, r1
 8000a50:	23a0      	movs	r3, #160	; 0xa0
 8000a52:	05db      	lsls	r3, r3, #23
 8000a54:	0011      	movs	r1, r2
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 fa94 	bl	8000f84 <HAL_GPIO_Init>

}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b009      	add	sp, #36	; 0x24
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	40021000 	.word	0x40021000
 8000a68:	000007ff 	.word	0x000007ff

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>
	...

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <HAL_MspInit+0x24>)
 8000a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_MspInit+0x24>)
 8000a82:	2101      	movs	r1, #1
 8000a84:	430a      	orrs	r2, r1
 8000a86:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <HAL_MspInit+0x24>)
 8000a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <HAL_MspInit+0x24>)
 8000a8e:	2180      	movs	r1, #128	; 0x80
 8000a90:	0549      	lsls	r1, r1, #21
 8000a92:	430a      	orrs	r2, r1
 8000a94:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b089      	sub	sp, #36	; 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	240c      	movs	r4, #12
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	0018      	movs	r0, r3
 8000aae:	2314      	movs	r3, #20
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f002 f9cc 	bl	8002e50 <memset>
  if(hi2c->Instance==I2C1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <HAL_I2C_MspInit+0x8c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d130      	bne.n	8000b24 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <HAL_I2C_MspInit+0x90>)
 8000ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <HAL_I2C_MspInit+0x90>)
 8000ac8:	2102      	movs	r1, #2
 8000aca:	430a      	orrs	r2, r1
 8000acc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <HAL_I2C_MspInit+0x90>)
 8000ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ada:	0021      	movs	r1, r4
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	22c0      	movs	r2, #192	; 0xc0
 8000ae0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2212      	movs	r2, #18
 8000ae6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	2201      	movs	r2, #1
 8000aec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2203      	movs	r2, #3
 8000af2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2201      	movs	r2, #1
 8000af8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	4a0d      	ldr	r2, [pc, #52]	; (8000b34 <HAL_I2C_MspInit+0x94>)
 8000afe:	0019      	movs	r1, r3
 8000b00:	0010      	movs	r0, r2
 8000b02:	f000 fa3f 	bl	8000f84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_I2C_MspInit+0x90>)
 8000b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_I2C_MspInit+0x90>)
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	0389      	lsls	r1, r1, #14
 8000b10:	430a      	orrs	r2, r1
 8000b12:	639a      	str	r2, [r3, #56]	; 0x38
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	2017      	movs	r0, #23
 8000b1a:	f000 f9ad 	bl	8000e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000b1e:	2017      	movs	r0, #23
 8000b20:	f000 f9bf 	bl	8000ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b009      	add	sp, #36	; 0x24
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	40005400 	.word	0x40005400
 8000b30:	40021000 	.word	0x40021000
 8000b34:	50000400 	.word	0x50000400

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <NMI_Handler+0x4>

08000b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler+0x4>

08000b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	// LCM delay count.
	if( lcm_delay )
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <SysTick_Handler+0x20>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d004      	beq.n	8000b6e <SysTick_Handler+0x16>
	{
		--lcm_delay;
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <SysTick_Handler+0x20>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	1e5a      	subs	r2, r3, #1
 8000b6a:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <SysTick_Handler+0x20>)
 8000b6c:	601a      	str	r2, [r3, #0]
	}


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6e:	f000 f8bb 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	2000003c 	.word	0x2000003c

08000b7c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

	// I2C task.
	I2C_Slave_Task();
 8000b80:	f7ff fc8c 	bl	800049c <I2C_Slave_Task>

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <I2C1_IRQHandler+0x30>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	699a      	ldr	r2, [r3, #24]
 8000b8a:	23e0      	movs	r3, #224	; 0xe0
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	4013      	ands	r3, r2
 8000b90:	d004      	beq.n	8000b9c <I2C1_IRQHandler+0x20>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <I2C1_IRQHandler+0x30>)
 8000b94:	0018      	movs	r0, r3
 8000b96:	f000 fc29 	bl	80013ec <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000b9a:	e003      	b.n	8000ba4 <I2C1_IRQHandler+0x28>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <I2C1_IRQHandler+0x30>)
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f000 fc0a 	bl	80013b8 <HAL_I2C_EV_IRQHandler>
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	2000006c 	.word	0x2000006c

08000bb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000bbc:	4813      	ldr	r0, [pc, #76]	; (8000c0c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000bbe:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000bc0:	4813      	ldr	r0, [pc, #76]	; (8000c10 <LoopForever+0x6>)
    LDR R1, [R0]
 8000bc2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000bc4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000bc6:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <LoopForever+0xa>)
    CMP R1, R2
 8000bc8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000bca:	d105      	bne.n	8000bd8 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000bcc:	4812      	ldr	r0, [pc, #72]	; (8000c18 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000bce:	4913      	ldr	r1, [pc, #76]	; (8000c1c <LoopForever+0x12>)
    STR R1, [R0]
 8000bd0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000bd2:	4813      	ldr	r0, [pc, #76]	; (8000c20 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000bd4:	4913      	ldr	r1, [pc, #76]	; (8000c24 <LoopForever+0x1a>)
    STR R1, [R0]
 8000bd6:	6001      	str	r1, [r0, #0]

08000bd8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd8:	4813      	ldr	r0, [pc, #76]	; (8000c28 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000bda:	4914      	ldr	r1, [pc, #80]	; (8000c2c <LoopForever+0x22>)
  ldr r2, =_sidata
 8000bdc:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <LoopForever+0x26>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a11      	ldr	r2, [pc, #68]	; (8000c34 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000bf0:	4c11      	ldr	r4, [pc, #68]	; (8000c38 <LoopForever+0x2e>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bfe:	f7ff ffd7 	bl	8000bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c02:	f002 f901 	bl	8002e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c06:	f7ff fe11 	bl	800082c <main>

08000c0a <LoopForever>:

LoopForever:
    b LoopForever
 8000c0a:	e7fe      	b.n	8000c0a <LoopForever>
   ldr   r0, =_estack
 8000c0c:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000c10:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000c14:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000c18:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000c1c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000c20:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000c24:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c30:	08002ea4 	.word	0x08002ea4
  ldr r2, =_sbss
 8000c34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c38:	200000bc 	.word	0x200000bc

08000c3c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC1_COMP_IRQHandler>
	...

08000c40 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <HAL_Init+0x3c>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <HAL_Init+0x3c>)
 8000c52:	2140      	movs	r1, #64	; 0x40
 8000c54:	430a      	orrs	r2, r1
 8000c56:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f000 f811 	bl	8000c80 <HAL_InitTick>
 8000c5e:	1e03      	subs	r3, r0, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
 8000c68:	e001      	b.n	8000c6e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c6a:	f7ff ff05 	bl	8000a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
}
 8000c72:	0018      	movs	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b002      	add	sp, #8
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	40022000 	.word	0x40022000

08000c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_InitTick+0x5c>)
 8000c8a:	681c      	ldr	r4, [r3, #0]
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HAL_InitTick+0x60>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	0019      	movs	r1, r3
 8000c92:	23fa      	movs	r3, #250	; 0xfa
 8000c94:	0098      	lsls	r0, r3, #2
 8000c96:	f7ff fa37 	bl	8000108 <__udivsi3>
 8000c9a:	0003      	movs	r3, r0
 8000c9c:	0019      	movs	r1, r3
 8000c9e:	0020      	movs	r0, r4
 8000ca0:	f7ff fa32 	bl	8000108 <__udivsi3>
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f000 f90b 	bl	8000ec2 <HAL_SYSTICK_Config>
 8000cac:	1e03      	subs	r3, r0, #0
 8000cae:	d001      	beq.n	8000cb4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e00f      	b.n	8000cd4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	d80b      	bhi.n	8000cd2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	425b      	negs	r3, r3
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f000 f8d8 	bl	8000e78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_InitTick+0x64>)
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b003      	add	sp, #12
 8000cda:	bd90      	pop	{r4, r7, pc}
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <HAL_IncTick+0x1c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_IncTick+0x20>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	18d2      	adds	r2, r2, r3
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <HAL_IncTick+0x20>)
 8000cfa:	601a      	str	r2, [r3, #0]
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	20000008 	.word	0x20000008
 8000d08:	200000b8 	.word	0x200000b8

08000d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b02      	ldr	r3, [pc, #8]	; (8000d1c <HAL_GetTick+0x10>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	200000b8 	.word	0x200000b8

08000d20 <__NVIC_EnableIRQ>:
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	0002      	movs	r2, r0
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b7f      	cmp	r3, #127	; 0x7f
 8000d32:	d809      	bhi.n	8000d48 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d34:	1dfb      	adds	r3, r7, #7
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	001a      	movs	r2, r3
 8000d3a:	231f      	movs	r3, #31
 8000d3c:	401a      	ands	r2, r3
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <__NVIC_EnableIRQ+0x30>)
 8000d40:	2101      	movs	r1, #1
 8000d42:	4091      	lsls	r1, r2
 8000d44:	000a      	movs	r2, r1
 8000d46:	601a      	str	r2, [r3, #0]
}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b002      	add	sp, #8
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	0002      	movs	r2, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b7f      	cmp	r3, #127	; 0x7f
 8000d68:	d828      	bhi.n	8000dbc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d6a:	4a2f      	ldr	r2, [pc, #188]	; (8000e28 <__NVIC_SetPriority+0xd4>)
 8000d6c:	1dfb      	adds	r3, r7, #7
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	33c0      	adds	r3, #192	; 0xc0
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	589b      	ldr	r3, [r3, r2]
 8000d7a:	1dfa      	adds	r2, r7, #7
 8000d7c:	7812      	ldrb	r2, [r2, #0]
 8000d7e:	0011      	movs	r1, r2
 8000d80:	2203      	movs	r2, #3
 8000d82:	400a      	ands	r2, r1
 8000d84:	00d2      	lsls	r2, r2, #3
 8000d86:	21ff      	movs	r1, #255	; 0xff
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	000a      	movs	r2, r1
 8000d8c:	43d2      	mvns	r2, r2
 8000d8e:	401a      	ands	r2, r3
 8000d90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	019b      	lsls	r3, r3, #6
 8000d96:	22ff      	movs	r2, #255	; 0xff
 8000d98:	401a      	ands	r2, r3
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	0018      	movs	r0, r3
 8000da0:	2303      	movs	r3, #3
 8000da2:	4003      	ands	r3, r0
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da8:	481f      	ldr	r0, [pc, #124]	; (8000e28 <__NVIC_SetPriority+0xd4>)
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b25b      	sxtb	r3, r3
 8000db0:	089b      	lsrs	r3, r3, #2
 8000db2:	430a      	orrs	r2, r1
 8000db4:	33c0      	adds	r3, #192	; 0xc0
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dba:	e031      	b.n	8000e20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dbc:	4a1b      	ldr	r2, [pc, #108]	; (8000e2c <__NVIC_SetPriority+0xd8>)
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	0019      	movs	r1, r3
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	400b      	ands	r3, r1
 8000dc8:	3b08      	subs	r3, #8
 8000dca:	089b      	lsrs	r3, r3, #2
 8000dcc:	3306      	adds	r3, #6
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	18d3      	adds	r3, r2, r3
 8000dd2:	3304      	adds	r3, #4
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	1dfa      	adds	r2, r7, #7
 8000dd8:	7812      	ldrb	r2, [r2, #0]
 8000dda:	0011      	movs	r1, r2
 8000ddc:	2203      	movs	r2, #3
 8000dde:	400a      	ands	r2, r1
 8000de0:	00d2      	lsls	r2, r2, #3
 8000de2:	21ff      	movs	r1, #255	; 0xff
 8000de4:	4091      	lsls	r1, r2
 8000de6:	000a      	movs	r2, r1
 8000de8:	43d2      	mvns	r2, r2
 8000dea:	401a      	ands	r2, r3
 8000dec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	019b      	lsls	r3, r3, #6
 8000df2:	22ff      	movs	r2, #255	; 0xff
 8000df4:	401a      	ands	r2, r3
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	4003      	ands	r3, r0
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <__NVIC_SetPriority+0xd8>)
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	001c      	movs	r4, r3
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	4023      	ands	r3, r4
 8000e10:	3b08      	subs	r3, #8
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	430a      	orrs	r2, r1
 8000e16:	3306      	adds	r3, #6
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	18c3      	adds	r3, r0, r3
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	601a      	str	r2, [r3, #0]
}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b003      	add	sp, #12
 8000e26:	bd90      	pop	{r4, r7, pc}
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	1e5a      	subs	r2, r3, #1
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	045b      	lsls	r3, r3, #17
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d301      	bcc.n	8000e48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e44:	2301      	movs	r3, #1
 8000e46:	e010      	b.n	8000e6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <SysTick_Config+0x44>)
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e50:	2301      	movs	r3, #1
 8000e52:	425b      	negs	r3, r3
 8000e54:	2103      	movs	r1, #3
 8000e56:	0018      	movs	r0, r3
 8000e58:	f7ff ff7c 	bl	8000d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <SysTick_Config+0x44>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <SysTick_Config+0x44>)
 8000e64:	2207      	movs	r2, #7
 8000e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	e000e010 	.word	0xe000e010

08000e78 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	210f      	movs	r1, #15
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	1c02      	adds	r2, r0, #0
 8000e88:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b25b      	sxtb	r3, r3
 8000e92:	0011      	movs	r1, r2
 8000e94:	0018      	movs	r0, r3
 8000e96:	f7ff ff5d 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b004      	add	sp, #16
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	0002      	movs	r2, r0
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f7ff ff33 	bl	8000d20 <__NVIC_EnableIRQ>
}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b002      	add	sp, #8
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f7ff ffaf 	bl	8000e30 <SysTick_Config>
 8000ed2:	0003      	movs	r3, r0
}
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b002      	add	sp, #8
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ee4:	210f      	movs	r1, #15
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2225      	movs	r2, #37	; 0x25
 8000ef0:	5c9b      	ldrb	r3, [r3, r2]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d006      	beq.n	8000f06 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2204      	movs	r2, #4
 8000efc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	2201      	movs	r2, #1
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	e02a      	b.n	8000f5c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	210e      	movs	r1, #14
 8000f12:	438a      	bics	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2101      	movs	r1, #1
 8000f22:	438a      	bics	r2, r1
 8000f24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	221c      	movs	r2, #28
 8000f2c:	401a      	ands	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	2101      	movs	r1, #1
 8000f34:	4091      	lsls	r1, r2
 8000f36:	000a      	movs	r2, r1
 8000f38:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2225      	movs	r2, #37	; 0x25
 8000f3e:	2101      	movs	r1, #1
 8000f40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2224      	movs	r2, #36	; 0x24
 8000f46:	2100      	movs	r1, #0
 8000f48:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d004      	beq.n	8000f5c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	0010      	movs	r0, r2
 8000f5a:	4798      	blx	r3
    }
  }
  return status;
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	18fb      	adds	r3, r7, r3
 8000f60:	781b      	ldrb	r3, [r3, #0]
}
 8000f62:	0018      	movs	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b004      	add	sp, #16
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2225      	movs	r2, #37	; 0x25
 8000f76:	5c9b      	ldrb	r3, [r3, r2]
 8000f78:	b2db      	uxtb	r3, r3
}
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b002      	add	sp, #8
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f9a:	e143      	b.n	8001224 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4091      	lsls	r1, r2
 8000fa6:	000a      	movs	r2, r1
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d100      	bne.n	8000fb4 <HAL_GPIO_Init+0x30>
 8000fb2:	e134      	b.n	800121e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d00b      	beq.n	8000fd4 <HAL_GPIO_Init+0x50>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d007      	beq.n	8000fd4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fc8:	2b11      	cmp	r3, #17
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b12      	cmp	r3, #18
 8000fd2:	d130      	bne.n	8001036 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	409a      	lsls	r2, r3
 8000fe2:	0013      	movs	r3, r2
 8000fe4:	43da      	mvns	r2, r3
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	68da      	ldr	r2, [r3, #12]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	409a      	lsls	r2, r3
 8000ff6:	0013      	movs	r3, r2
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800100a:	2201      	movs	r2, #1
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
 8001010:	0013      	movs	r3, r2
 8001012:	43da      	mvns	r2, r3
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	091b      	lsrs	r3, r3, #4
 8001020:	2201      	movs	r2, #1
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
 8001028:	0013      	movs	r3, r2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	409a      	lsls	r2, r3
 8001044:	0013      	movs	r3, r2
 8001046:	43da      	mvns	r2, r3
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	409a      	lsls	r2, r3
 8001058:	0013      	movs	r3, r2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0xf2>
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b12      	cmp	r3, #18
 8001074:	d123      	bne.n	80010be <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	08da      	lsrs	r2, r3, #3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3208      	adds	r2, #8
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	58d3      	ldr	r3, [r2, r3]
 8001082:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	2207      	movs	r2, #7
 8001088:	4013      	ands	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	220f      	movs	r2, #15
 800108e:	409a      	lsls	r2, r3
 8001090:	0013      	movs	r3, r2
 8001092:	43da      	mvns	r2, r3
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	691a      	ldr	r2, [r3, #16]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	2107      	movs	r1, #7
 80010a2:	400b      	ands	r3, r1
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	409a      	lsls	r2, r3
 80010a8:	0013      	movs	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	08da      	lsrs	r2, r3, #3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3208      	adds	r2, #8
 80010b8:	0092      	lsls	r2, r2, #2
 80010ba:	6939      	ldr	r1, [r7, #16]
 80010bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	2203      	movs	r2, #3
 80010ca:	409a      	lsls	r2, r3
 80010cc:	0013      	movs	r3, r2
 80010ce:	43da      	mvns	r2, r3
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2203      	movs	r2, #3
 80010dc:	401a      	ands	r2, r3
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	409a      	lsls	r2, r3
 80010e4:	0013      	movs	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	055b      	lsls	r3, r3, #21
 80010fa:	4013      	ands	r3, r2
 80010fc:	d100      	bne.n	8001100 <HAL_GPIO_Init+0x17c>
 80010fe:	e08e      	b.n	800121e <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001100:	4b4e      	ldr	r3, [pc, #312]	; (800123c <HAL_GPIO_Init+0x2b8>)
 8001102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001104:	4b4d      	ldr	r3, [pc, #308]	; (800123c <HAL_GPIO_Init+0x2b8>)
 8001106:	2101      	movs	r1, #1
 8001108:	430a      	orrs	r2, r1
 800110a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800110c:	4a4c      	ldr	r2, [pc, #304]	; (8001240 <HAL_GPIO_Init+0x2bc>)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3302      	adds	r3, #2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	589b      	ldr	r3, [r3, r2]
 8001118:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	2203      	movs	r2, #3
 800111e:	4013      	ands	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	220f      	movs	r2, #15
 8001124:	409a      	lsls	r2, r3
 8001126:	0013      	movs	r3, r2
 8001128:	43da      	mvns	r2, r3
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	23a0      	movs	r3, #160	; 0xa0
 8001134:	05db      	lsls	r3, r3, #23
 8001136:	429a      	cmp	r2, r3
 8001138:	d00d      	beq.n	8001156 <HAL_GPIO_Init+0x1d2>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a41      	ldr	r2, [pc, #260]	; (8001244 <HAL_GPIO_Init+0x2c0>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d007      	beq.n	8001152 <HAL_GPIO_Init+0x1ce>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a40      	ldr	r2, [pc, #256]	; (8001248 <HAL_GPIO_Init+0x2c4>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d101      	bne.n	800114e <HAL_GPIO_Init+0x1ca>
 800114a:	2302      	movs	r3, #2
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x1d4>
 800114e:	2306      	movs	r3, #6
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x1d4>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x1d4>
 8001156:	2300      	movs	r3, #0
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	2103      	movs	r1, #3
 800115c:	400a      	ands	r2, r1
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4093      	lsls	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001168:	4935      	ldr	r1, [pc, #212]	; (8001240 <HAL_GPIO_Init+0x2bc>)
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001176:	4b35      	ldr	r3, [pc, #212]	; (800124c <HAL_GPIO_Init+0x2c8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	43da      	mvns	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	025b      	lsls	r3, r3, #9
 800118e:	4013      	ands	r3, r2
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800119a:	4b2c      	ldr	r3, [pc, #176]	; (800124c <HAL_GPIO_Init+0x2c8>)
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80011a0:	4b2a      	ldr	r3, [pc, #168]	; (800124c <HAL_GPIO_Init+0x2c8>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	43da      	mvns	r2, r3
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	029b      	lsls	r3, r3, #10
 80011b8:	4013      	ands	r3, r2
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011c4:	4b21      	ldr	r3, [pc, #132]	; (800124c <HAL_GPIO_Init+0x2c8>)
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <HAL_GPIO_Init+0x2c8>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	43da      	mvns	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	035b      	lsls	r3, r3, #13
 80011e2:	4013      	ands	r3, r2
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <HAL_GPIO_Init+0x2c8>)
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011f4:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_GPIO_Init+0x2c8>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	43da      	mvns	r2, r3
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	039b      	lsls	r3, r3, #14
 800120c:	4013      	ands	r3, r2
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <HAL_GPIO_Init+0x2c8>)
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3301      	adds	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	40da      	lsrs	r2, r3
 800122c:	1e13      	subs	r3, r2, #0
 800122e:	d000      	beq.n	8001232 <HAL_GPIO_Init+0x2ae>
 8001230:	e6b4      	b.n	8000f9c <HAL_GPIO_Init+0x18>
  }
}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46c0      	nop			; (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	b006      	add	sp, #24
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40021000 	.word	0x40021000
 8001240:	40010000 	.word	0x40010000
 8001244:	50000400 	.word	0x50000400
 8001248:	50000800 	.word	0x50000800
 800124c:	40010400 	.word	0x40010400

08001250 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	0008      	movs	r0, r1
 800125a:	0011      	movs	r1, r2
 800125c:	1cbb      	adds	r3, r7, #2
 800125e:	1c02      	adds	r2, r0, #0
 8001260:	801a      	strh	r2, [r3, #0]
 8001262:	1c7b      	adds	r3, r7, #1
 8001264:	1c0a      	adds	r2, r1, #0
 8001266:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001268:	1c7b      	adds	r3, r7, #1
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d004      	beq.n	800127a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001270:	1cbb      	adds	r3, r7, #2
 8001272:	881a      	ldrh	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001278:	e003      	b.n	8001282 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800127a:	1cbb      	adds	r3, r7, #2
 800127c:	881a      	ldrh	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	46bd      	mov	sp, r7
 8001286:	b002      	add	sp, #8
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e082      	b.n	80013a4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2241      	movs	r2, #65	; 0x41
 80012a2:	5c9b      	ldrb	r3, [r3, r2]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d107      	bne.n	80012ba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2240      	movs	r2, #64	; 0x40
 80012ae:	2100      	movs	r1, #0
 80012b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	0018      	movs	r0, r3
 80012b6:	f7ff fbf3 	bl	8000aa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2241      	movs	r2, #65	; 0x41
 80012be:	2124      	movs	r1, #36	; 0x24
 80012c0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2101      	movs	r1, #1
 80012ce:	438a      	bics	r2, r1
 80012d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4934      	ldr	r1, [pc, #208]	; (80013ac <HAL_I2C_Init+0x120>)
 80012dc:	400a      	ands	r2, r1
 80012de:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4931      	ldr	r1, [pc, #196]	; (80013b0 <HAL_I2C_Init+0x124>)
 80012ec:	400a      	ands	r2, r1
 80012ee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d108      	bne.n	800130a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	0209      	lsls	r1, r1, #8
 8001304:	430a      	orrs	r2, r1
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	e007      	b.n	800131a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2184      	movs	r1, #132	; 0x84
 8001314:	0209      	lsls	r1, r1, #8
 8001316:	430a      	orrs	r2, r1
 8001318:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d104      	bne.n	800132c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2280      	movs	r2, #128	; 0x80
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	491f      	ldr	r1, [pc, #124]	; (80013b4 <HAL_I2C_Init+0x128>)
 8001338:	430a      	orrs	r2, r1
 800133a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	491a      	ldr	r1, [pc, #104]	; (80013b0 <HAL_I2C_Init+0x124>)
 8001348:	400a      	ands	r2, r1
 800134a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	691a      	ldr	r2, [r3, #16]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	431a      	orrs	r2, r3
 8001356:	0011      	movs	r1, r2
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	021a      	lsls	r2, r3, #8
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	430a      	orrs	r2, r1
 8001364:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69d9      	ldr	r1, [r3, #28]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1a      	ldr	r2, [r3, #32]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2101      	movs	r1, #1
 8001382:	430a      	orrs	r2, r1
 8001384:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2241      	movs	r2, #65	; 0x41
 8001390:	2120      	movs	r1, #32
 8001392:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2242      	movs	r2, #66	; 0x42
 800139e:	2100      	movs	r1, #0
 80013a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	f0ffffff 	.word	0xf0ffffff
 80013b0:	ffff7fff 	.word	0xffff7fff
 80013b4:	02008000 	.word	0x02008000

080013b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013dc:	68ba      	ldr	r2, [r7, #8]
 80013de:	68f9      	ldr	r1, [r7, #12]
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	4798      	blx	r3
  }
}
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b004      	add	sp, #16
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	0a1b      	lsrs	r3, r3, #8
 8001408:	001a      	movs	r2, r3
 800140a:	2301      	movs	r3, #1
 800140c:	4013      	ands	r3, r2
 800140e:	d010      	beq.n	8001432 <HAL_I2C_ER_IRQHandler+0x46>
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	09db      	lsrs	r3, r3, #7
 8001414:	001a      	movs	r2, r3
 8001416:	2301      	movs	r3, #1
 8001418:	4013      	ands	r3, r2
 800141a:	d00a      	beq.n	8001432 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001420:	2201      	movs	r2, #1
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2280      	movs	r2, #128	; 0x80
 800142e:	0052      	lsls	r2, r2, #1
 8001430:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	0a9b      	lsrs	r3, r3, #10
 8001436:	001a      	movs	r2, r3
 8001438:	2301      	movs	r3, #1
 800143a:	4013      	ands	r3, r2
 800143c:	d010      	beq.n	8001460 <HAL_I2C_ER_IRQHandler+0x74>
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	09db      	lsrs	r3, r3, #7
 8001442:	001a      	movs	r2, r3
 8001444:	2301      	movs	r3, #1
 8001446:	4013      	ands	r3, r2
 8001448:	d00a      	beq.n	8001460 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	2208      	movs	r2, #8
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	00d2      	lsls	r2, r2, #3
 800145e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	0a5b      	lsrs	r3, r3, #9
 8001464:	001a      	movs	r2, r3
 8001466:	2301      	movs	r3, #1
 8001468:	4013      	ands	r3, r2
 800146a:	d010      	beq.n	800148e <HAL_I2C_ER_IRQHandler+0xa2>
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	09db      	lsrs	r3, r3, #7
 8001470:	001a      	movs	r2, r3
 8001472:	2301      	movs	r3, #1
 8001474:	4013      	ands	r3, r2
 8001476:	d00a      	beq.n	800148e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147c:	2202      	movs	r2, #2
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	0092      	lsls	r2, r2, #2
 800148c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	220b      	movs	r2, #11
 8001498:	4013      	ands	r3, r2
 800149a:	d005      	beq.n	80014a8 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	0011      	movs	r1, r2
 80014a2:	0018      	movs	r0, r3
 80014a4:	f000 fbd8 	bl	8001c58 <I2C_ITError>
  }
}
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b006      	add	sp, #24
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b002      	add	sp, #8
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80014c8:	46c0      	nop			; (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b002      	add	sp, #8
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	0008      	movs	r0, r1
 80014da:	0011      	movs	r1, r2
 80014dc:	1cfb      	adds	r3, r7, #3
 80014de:	1c02      	adds	r2, r0, #0
 80014e0:	701a      	strb	r2, [r3, #0]
 80014e2:	003b      	movs	r3, r7
 80014e4:	1c0a      	adds	r2, r1, #0
 80014e6:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80014e8:	46c0      	nop			; (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b002      	add	sp, #8
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b002      	add	sp, #8
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001508:	46c0      	nop			; (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	b002      	add	sp, #8
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b002      	add	sp, #8
 800151e:	bd80      	pop	{r7, pc}

08001520 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2240      	movs	r2, #64	; 0x40
 800153a:	5c9b      	ldrb	r3, [r3, r2]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <I2C_Slave_ISR_IT+0x24>
 8001540:	2302      	movs	r3, #2
 8001542:	e0fa      	b.n	800173a <I2C_Slave_ISR_IT+0x21a>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2240      	movs	r2, #64	; 0x40
 8001548:	2101      	movs	r1, #1
 800154a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	095b      	lsrs	r3, r3, #5
 8001550:	001a      	movs	r2, r3
 8001552:	2301      	movs	r3, #1
 8001554:	4013      	ands	r3, r2
 8001556:	d00b      	beq.n	8001570 <I2C_Slave_ISR_IT+0x50>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	001a      	movs	r2, r3
 800155e:	2301      	movs	r3, #1
 8001560:	4013      	ands	r3, r2
 8001562:	d005      	beq.n	8001570 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	0011      	movs	r1, r2
 800156a:	0018      	movs	r0, r3
 800156c:	f000 f9f6 	bl	800195c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	001a      	movs	r2, r3
 8001576:	2301      	movs	r3, #1
 8001578:	4013      	ands	r3, r2
 800157a:	d054      	beq.n	8001626 <I2C_Slave_ISR_IT+0x106>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	091b      	lsrs	r3, r3, #4
 8001580:	001a      	movs	r2, r3
 8001582:	2301      	movs	r3, #1
 8001584:	4013      	ands	r3, r2
 8001586:	d04e      	beq.n	8001626 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800158c:	b29b      	uxth	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d12d      	bne.n	80015ee <I2C_Slave_ISR_IT+0xce>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2241      	movs	r2, #65	; 0x41
 8001596:	5c9b      	ldrb	r3, [r3, r2]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b28      	cmp	r3, #40	; 0x28
 800159c:	d10b      	bne.n	80015b6 <I2C_Slave_ISR_IT+0x96>
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	049b      	lsls	r3, r3, #18
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d106      	bne.n	80015b6 <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	0011      	movs	r1, r2
 80015ae:	0018      	movs	r0, r3
 80015b0:	f000 faf8 	bl	8001ba4 <I2C_ITListenCplt>
 80015b4:	e036      	b.n	8001624 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2241      	movs	r2, #65	; 0x41
 80015ba:	5c9b      	ldrb	r3, [r3, r2]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b29      	cmp	r3, #41	; 0x29
 80015c0:	d110      	bne.n	80015e4 <I2C_Slave_ISR_IT+0xc4>
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	4a5f      	ldr	r2, [pc, #380]	; (8001744 <I2C_Slave_ISR_IT+0x224>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d00c      	beq.n	80015e4 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2210      	movs	r2, #16
 80015d0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	0018      	movs	r0, r3
 80015d6:	f000 fc4a 	bl	8001e6e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	0018      	movs	r0, r3
 80015de:	f000 f957 	bl	8001890 <I2C_ITSlaveSeqCplt>
 80015e2:	e01f      	b.n	8001624 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2210      	movs	r2, #16
 80015ea:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80015ec:	e09d      	b.n	800172a <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2210      	movs	r2, #16
 80015f4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	2204      	movs	r2, #4
 80015fc:	431a      	orrs	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <I2C_Slave_ISR_IT+0xf4>
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	045b      	lsls	r3, r3, #17
 800160e:	429a      	cmp	r2, r3
 8001610:	d000      	beq.n	8001614 <I2C_Slave_ISR_IT+0xf4>
 8001612:	e08a      	b.n	800172a <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	0011      	movs	r1, r2
 800161c:	0018      	movs	r0, r3
 800161e:	f000 fb1b 	bl	8001c58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001622:	e082      	b.n	800172a <I2C_Slave_ISR_IT+0x20a>
 8001624:	e081      	b.n	800172a <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	089b      	lsrs	r3, r3, #2
 800162a:	001a      	movs	r2, r3
 800162c:	2301      	movs	r3, #1
 800162e:	4013      	ands	r3, r2
 8001630:	d031      	beq.n	8001696 <I2C_Slave_ISR_IT+0x176>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	001a      	movs	r2, r3
 8001638:	2301      	movs	r3, #1
 800163a:	4013      	ands	r3, r2
 800163c:	d02b      	beq.n	8001696 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001642:	b29b      	uxth	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d018      	beq.n	800167a <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001664:	3b01      	subs	r3, #1
 8001666:	b29a      	uxth	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001670:	b29b      	uxth	r3, r3
 8001672:	3b01      	subs	r3, #1
 8001674:	b29a      	uxth	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167e:	b29b      	uxth	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d154      	bne.n	800172e <I2C_Slave_ISR_IT+0x20e>
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	4a2f      	ldr	r2, [pc, #188]	; (8001744 <I2C_Slave_ISR_IT+0x224>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d050      	beq.n	800172e <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	0018      	movs	r0, r3
 8001690:	f000 f8fe 	bl	8001890 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001694:	e04b      	b.n	800172e <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	08db      	lsrs	r3, r3, #3
 800169a:	001a      	movs	r2, r3
 800169c:	2301      	movs	r3, #1
 800169e:	4013      	ands	r3, r2
 80016a0:	d00c      	beq.n	80016bc <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	08db      	lsrs	r3, r3, #3
 80016a6:	001a      	movs	r2, r3
 80016a8:	2301      	movs	r3, #1
 80016aa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80016ac:	d006      	beq.n	80016bc <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	0011      	movs	r1, r2
 80016b4:	0018      	movs	r0, r3
 80016b6:	f000 f847 	bl	8001748 <I2C_ITAddrCplt>
 80016ba:	e039      	b.n	8001730 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	085b      	lsrs	r3, r3, #1
 80016c0:	001a      	movs	r2, r3
 80016c2:	2301      	movs	r3, #1
 80016c4:	4013      	ands	r3, r2
 80016c6:	d033      	beq.n	8001730 <I2C_Slave_ISR_IT+0x210>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	085b      	lsrs	r3, r3, #1
 80016cc:	001a      	movs	r2, r3
 80016ce:	2301      	movs	r3, #1
 80016d0:	4013      	ands	r3, r2
 80016d2:	d02d      	beq.n	8001730 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d8:	b29b      	uxth	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d018      	beq.n	8001710 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	781a      	ldrb	r2, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	3b01      	subs	r3, #1
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001706:	3b01      	subs	r3, #1
 8001708:	b29a      	uxth	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	851a      	strh	r2, [r3, #40]	; 0x28
 800170e:	e00f      	b.n	8001730 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	045b      	lsls	r3, r3, #17
 8001716:	429a      	cmp	r2, r3
 8001718:	d002      	beq.n	8001720 <I2C_Slave_ISR_IT+0x200>
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d107      	bne.n	8001730 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	0018      	movs	r0, r3
 8001724:	f000 f8b4 	bl	8001890 <I2C_ITSlaveSeqCplt>
 8001728:	e002      	b.n	8001730 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	e000      	b.n	8001730 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 800172e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2240      	movs	r2, #64	; 0x40
 8001734:	2100      	movs	r1, #0
 8001736:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	0018      	movs	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	b006      	add	sp, #24
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	ffff0000 	.word	0xffff0000

08001748 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001748:	b5b0      	push	{r4, r5, r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2241      	movs	r2, #65	; 0x41
 8001756:	5c9b      	ldrb	r3, [r3, r2]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	001a      	movs	r2, r3
 800175c:	2328      	movs	r3, #40	; 0x28
 800175e:	4013      	ands	r3, r2
 8001760:	2b28      	cmp	r3, #40	; 0x28
 8001762:	d000      	beq.n	8001766 <I2C_ITAddrCplt+0x1e>
 8001764:	e088      	b.n	8001878 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	0c1b      	lsrs	r3, r3, #16
 800176e:	b2da      	uxtb	r2, r3
 8001770:	250f      	movs	r5, #15
 8001772:	197b      	adds	r3, r7, r5
 8001774:	2101      	movs	r1, #1
 8001776:	400a      	ands	r2, r1
 8001778:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	0c1b      	lsrs	r3, r3, #16
 8001782:	b29a      	uxth	r2, r3
 8001784:	200c      	movs	r0, #12
 8001786:	183b      	adds	r3, r7, r0
 8001788:	21fe      	movs	r1, #254	; 0xfe
 800178a:	400a      	ands	r2, r1
 800178c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	b29a      	uxth	r2, r3
 8001796:	240a      	movs	r4, #10
 8001798:	193b      	adds	r3, r7, r4
 800179a:	0592      	lsls	r2, r2, #22
 800179c:	0d92      	lsrs	r2, r2, #22
 800179e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	2308      	movs	r3, #8
 80017aa:	18fb      	adds	r3, r7, r3
 80017ac:	21fe      	movs	r1, #254	; 0xfe
 80017ae:	400a      	ands	r2, r1
 80017b0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d148      	bne.n	800184c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80017ba:	0021      	movs	r1, r4
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	09db      	lsrs	r3, r3, #7
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	183b      	adds	r3, r7, r0
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	4053      	eors	r3, r2
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	001a      	movs	r2, r3
 80017ce:	2306      	movs	r3, #6
 80017d0:	4013      	ands	r3, r2
 80017d2:	d120      	bne.n	8001816 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80017d4:	183b      	adds	r3, r7, r0
 80017d6:	187a      	adds	r2, r7, r1
 80017d8:	8812      	ldrh	r2, [r2, #0]
 80017da:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d14c      	bne.n	8001888 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2208      	movs	r2, #8
 80017fa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2240      	movs	r2, #64	; 0x40
 8001800:	2100      	movs	r1, #0
 8001802:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001804:	183b      	adds	r3, r7, r0
 8001806:	881a      	ldrh	r2, [r3, #0]
 8001808:	197b      	adds	r3, r7, r5
 800180a:	7819      	ldrb	r1, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	0018      	movs	r0, r3
 8001810:	f7ff fe5e 	bl	80014d0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001814:	e038      	b.n	8001888 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8001816:	240c      	movs	r4, #12
 8001818:	193b      	adds	r3, r7, r4
 800181a:	2208      	movs	r2, #8
 800181c:	18ba      	adds	r2, r7, r2
 800181e:	8812      	ldrh	r2, [r2, #0]
 8001820:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	021a      	lsls	r2, r3, #8
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	0011      	movs	r1, r2
 800182a:	0018      	movs	r0, r3
 800182c:	f000 fb60 	bl	8001ef0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2240      	movs	r2, #64	; 0x40
 8001834:	2100      	movs	r1, #0
 8001836:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001838:	193b      	adds	r3, r7, r4
 800183a:	881a      	ldrh	r2, [r3, #0]
 800183c:	230f      	movs	r3, #15
 800183e:	18fb      	adds	r3, r7, r3
 8001840:	7819      	ldrb	r1, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	0018      	movs	r0, r3
 8001846:	f7ff fe43 	bl	80014d0 <HAL_I2C_AddrCallback>
}
 800184a:	e01d      	b.n	8001888 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	021a      	lsls	r2, r3, #8
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	0011      	movs	r1, r2
 8001854:	0018      	movs	r0, r3
 8001856:	f000 fb4b 	bl	8001ef0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2240      	movs	r2, #64	; 0x40
 800185e:	2100      	movs	r1, #0
 8001860:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001862:	230c      	movs	r3, #12
 8001864:	18fb      	adds	r3, r7, r3
 8001866:	881a      	ldrh	r2, [r3, #0]
 8001868:	230f      	movs	r3, #15
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	7819      	ldrb	r1, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	0018      	movs	r0, r3
 8001872:	f7ff fe2d 	bl	80014d0 <HAL_I2C_AddrCallback>
}
 8001876:	e007      	b.n	8001888 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2208      	movs	r2, #8
 800187e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2240      	movs	r2, #64	; 0x40
 8001884:	2100      	movs	r1, #0
 8001886:	5499      	strb	r1, [r3, r2]
}
 8001888:	46c0      	nop			; (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	b004      	add	sp, #16
 800188e:	bdb0      	pop	{r4, r5, r7, pc}

08001890 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2242      	movs	r2, #66	; 0x42
 80018a4:	2100      	movs	r1, #0
 80018a6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	0b9b      	lsrs	r3, r3, #14
 80018ac:	001a      	movs	r2, r3
 80018ae:	2301      	movs	r3, #1
 80018b0:	4013      	ands	r3, r2
 80018b2:	d008      	beq.n	80018c6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4925      	ldr	r1, [pc, #148]	; (8001954 <I2C_ITSlaveSeqCplt+0xc4>)
 80018c0:	400a      	ands	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e00d      	b.n	80018e2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	0bdb      	lsrs	r3, r3, #15
 80018ca:	001a      	movs	r2, r3
 80018cc:	2301      	movs	r3, #1
 80018ce:	4013      	ands	r3, r2
 80018d0:	d007      	beq.n	80018e2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	491e      	ldr	r1, [pc, #120]	; (8001958 <I2C_ITSlaveSeqCplt+0xc8>)
 80018de:	400a      	ands	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2241      	movs	r2, #65	; 0x41
 80018e6:	5c9b      	ldrb	r3, [r3, r2]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b29      	cmp	r3, #41	; 0x29
 80018ec:	d114      	bne.n	8001918 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2241      	movs	r2, #65	; 0x41
 80018f2:	2128      	movs	r1, #40	; 0x28
 80018f4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2221      	movs	r2, #33	; 0x21
 80018fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2101      	movs	r1, #1
 8001900:	0018      	movs	r0, r3
 8001902:	f000 faf5 	bl	8001ef0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2240      	movs	r2, #64	; 0x40
 800190a:	2100      	movs	r1, #0
 800190c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	0018      	movs	r0, r3
 8001912:	f7ff fdcd 	bl	80014b0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001916:	e019      	b.n	800194c <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2241      	movs	r2, #65	; 0x41
 800191c:	5c9b      	ldrb	r3, [r3, r2]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b2a      	cmp	r3, #42	; 0x2a
 8001922:	d113      	bne.n	800194c <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2241      	movs	r2, #65	; 0x41
 8001928:	2128      	movs	r1, #40	; 0x28
 800192a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2222      	movs	r2, #34	; 0x22
 8001930:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2102      	movs	r1, #2
 8001936:	0018      	movs	r0, r3
 8001938:	f000 fada 	bl	8001ef0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2240      	movs	r2, #64	; 0x40
 8001940:	2100      	movs	r1, #0
 8001942:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	0018      	movs	r0, r3
 8001948:	f7ff fdba 	bl	80014c0 <HAL_I2C_SlaveRxCpltCallback>
}
 800194c:	46c0      	nop			; (mov r8, r8)
 800194e:	46bd      	mov	sp, r7
 8001950:	b004      	add	sp, #16
 8001952:	bd80      	pop	{r7, pc}
 8001954:	ffffbfff 	.word	0xffffbfff
 8001958:	ffff7fff 	.word	0xffff7fff

0800195c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001972:	200f      	movs	r0, #15
 8001974:	183b      	adds	r3, r7, r0
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	2141      	movs	r1, #65	; 0x41
 800197a:	5c52      	ldrb	r2, [r2, r1]
 800197c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2220      	movs	r2, #32
 8001984:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001986:	183b      	adds	r3, r7, r0
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b21      	cmp	r3, #33	; 0x21
 800198c:	d003      	beq.n	8001996 <I2C_ITSlaveCplt+0x3a>
 800198e:	183b      	adds	r3, r7, r0
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b29      	cmp	r3, #41	; 0x29
 8001994:	d109      	bne.n	80019aa <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001996:	4a7d      	ldr	r2, [pc, #500]	; (8001b8c <I2C_ITSlaveCplt+0x230>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	0011      	movs	r1, r2
 800199c:	0018      	movs	r0, r3
 800199e:	f000 faa7 	bl	8001ef0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2221      	movs	r2, #33	; 0x21
 80019a6:	631a      	str	r2, [r3, #48]	; 0x30
 80019a8:	e011      	b.n	80019ce <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80019aa:	220f      	movs	r2, #15
 80019ac:	18bb      	adds	r3, r7, r2
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b22      	cmp	r3, #34	; 0x22
 80019b2:	d003      	beq.n	80019bc <I2C_ITSlaveCplt+0x60>
 80019b4:	18bb      	adds	r3, r7, r2
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b2a      	cmp	r3, #42	; 0x2a
 80019ba:	d108      	bne.n	80019ce <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80019bc:	4a74      	ldr	r2, [pc, #464]	; (8001b90 <I2C_ITSlaveCplt+0x234>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	0011      	movs	r1, r2
 80019c2:	0018      	movs	r0, r3
 80019c4:	f000 fa94 	bl	8001ef0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2222      	movs	r2, #34	; 0x22
 80019cc:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2180      	movs	r1, #128	; 0x80
 80019da:	0209      	lsls	r1, r1, #8
 80019dc:	430a      	orrs	r2, r1
 80019de:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	496a      	ldr	r1, [pc, #424]	; (8001b94 <I2C_ITSlaveCplt+0x238>)
 80019ec:	400a      	ands	r2, r1
 80019ee:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	0018      	movs	r0, r3
 80019f4:	f000 fa3b 	bl	8001e6e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	0b9b      	lsrs	r3, r3, #14
 80019fc:	001a      	movs	r2, r3
 80019fe:	2301      	movs	r3, #1
 8001a00:	4013      	ands	r3, r2
 8001a02:	d013      	beq.n	8001a2c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4962      	ldr	r1, [pc, #392]	; (8001b98 <I2C_ITSlaveCplt+0x23c>)
 8001a10:	400a      	ands	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d020      	beq.n	8001a5e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a2a:	e018      	b.n	8001a5e <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	0bdb      	lsrs	r3, r3, #15
 8001a30:	001a      	movs	r2, r3
 8001a32:	2301      	movs	r3, #1
 8001a34:	4013      	ands	r3, r2
 8001a36:	d012      	beq.n	8001a5e <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4956      	ldr	r1, [pc, #344]	; (8001b9c <I2C_ITSlaveCplt+0x240>)
 8001a44:	400a      	ands	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d006      	beq.n	8001a5e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	089b      	lsrs	r3, r3, #2
 8001a62:	001a      	movs	r2, r3
 8001a64:	2301      	movs	r3, #1
 8001a66:	4013      	ands	r3, r2
 8001a68:	d020      	beq.n	8001aac <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	4393      	bics	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00c      	beq.n	8001aac <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a96:	3b01      	subs	r3, #1
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d005      	beq.n	8001ac2 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	2204      	movs	r2, #4
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2242      	movs	r2, #66	; 0x42
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d013      	beq.n	8001b00 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	0011      	movs	r1, r2
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f000 f8b9 	bl	8001c58 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2241      	movs	r2, #65	; 0x41
 8001aea:	5c9b      	ldrb	r3, [r3, r2]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b28      	cmp	r3, #40	; 0x28
 8001af0:	d147      	bne.n	8001b82 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	0011      	movs	r1, r2
 8001af8:	0018      	movs	r0, r3
 8001afa:	f000 f853 	bl	8001ba4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001afe:	e040      	b.n	8001b82 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	4a26      	ldr	r2, [pc, #152]	; (8001ba0 <I2C_ITSlaveCplt+0x244>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d016      	beq.n	8001b38 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f7ff febf 	bl	8001890 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a22      	ldr	r2, [pc, #136]	; (8001ba0 <I2C_ITSlaveCplt+0x244>)
 8001b16:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2241      	movs	r2, #65	; 0x41
 8001b1c:	2120      	movs	r1, #32
 8001b1e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2240      	movs	r2, #64	; 0x40
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	0018      	movs	r0, r3
 8001b32:	f7ff fcdd 	bl	80014f0 <HAL_I2C_ListenCpltCallback>
}
 8001b36:	e024      	b.n	8001b82 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2241      	movs	r2, #65	; 0x41
 8001b3c:	5c9b      	ldrb	r3, [r3, r2]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b22      	cmp	r3, #34	; 0x22
 8001b42:	d10f      	bne.n	8001b64 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2241      	movs	r2, #65	; 0x41
 8001b48:	2120      	movs	r1, #32
 8001b4a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2240      	movs	r2, #64	; 0x40
 8001b56:	2100      	movs	r1, #0
 8001b58:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f7ff fcaf 	bl	80014c0 <HAL_I2C_SlaveRxCpltCallback>
}
 8001b62:	e00e      	b.n	8001b82 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2241      	movs	r2, #65	; 0x41
 8001b68:	2120      	movs	r1, #32
 8001b6a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2240      	movs	r2, #64	; 0x40
 8001b76:	2100      	movs	r1, #0
 8001b78:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f7ff fc97 	bl	80014b0 <HAL_I2C_SlaveTxCpltCallback>
}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b006      	add	sp, #24
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	00008001 	.word	0x00008001
 8001b90:	00008002 	.word	0x00008002
 8001b94:	fe00e800 	.word	0xfe00e800
 8001b98:	ffffbfff 	.word	0xffffbfff
 8001b9c:	ffff7fff 	.word	0xffff7fff
 8001ba0:	ffff0000 	.word	0xffff0000

08001ba4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a27      	ldr	r2, [pc, #156]	; (8001c50 <I2C_ITListenCplt+0xac>)
 8001bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2241      	movs	r2, #65	; 0x41
 8001bbe:	2120      	movs	r1, #32
 8001bc0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2242      	movs	r2, #66	; 0x42
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	001a      	movs	r2, r3
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d022      	beq.n	8001c22 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d012      	beq.n	8001c22 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001c22:	4a0c      	ldr	r2, [pc, #48]	; (8001c54 <I2C_ITListenCplt+0xb0>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	0011      	movs	r1, r2
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f000 f961 	bl	8001ef0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2210      	movs	r2, #16
 8001c34:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2240      	movs	r2, #64	; 0x40
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	0018      	movs	r0, r3
 8001c42:	f7ff fc55 	bl	80014f0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b002      	add	sp, #8
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	ffff0000 	.word	0xffff0000
 8001c54:	00008003 	.word	0x00008003

08001c58 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001c62:	200f      	movs	r0, #15
 8001c64:	183b      	adds	r3, r7, r0
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	2141      	movs	r1, #65	; 0x41
 8001c6a:	5c52      	ldrb	r2, [r2, r1]
 8001c6c:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2242      	movs	r2, #66	; 0x42
 8001c72:	2100      	movs	r1, #0
 8001c74:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a62      	ldr	r2, [pc, #392]	; (8001e04 <I2C_ITError+0x1ac>)
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001c8e:	183b      	adds	r3, r7, r0
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b28      	cmp	r3, #40	; 0x28
 8001c94:	d007      	beq.n	8001ca6 <I2C_ITError+0x4e>
 8001c96:	183b      	adds	r3, r7, r0
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b29      	cmp	r3, #41	; 0x29
 8001c9c:	d003      	beq.n	8001ca6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001c9e:	183b      	adds	r3, r7, r0
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8001ca4:	d10c      	bne.n	8001cc0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2103      	movs	r1, #3
 8001caa:	0018      	movs	r0, r3
 8001cac:	f000 f920 	bl	8001ef0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2241      	movs	r2, #65	; 0x41
 8001cb4:	2128      	movs	r1, #40	; 0x28
 8001cb6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a53      	ldr	r2, [pc, #332]	; (8001e08 <I2C_ITError+0x1b0>)
 8001cbc:	635a      	str	r2, [r3, #52]	; 0x34
 8001cbe:	e012      	b.n	8001ce6 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001cc0:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <I2C_ITError+0x1b4>)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	0011      	movs	r1, r2
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f000 f912 	bl	8001ef0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2241      	movs	r2, #65	; 0x41
 8001cd0:	5c9b      	ldrb	r3, [r3, r2]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b60      	cmp	r3, #96	; 0x60
 8001cd6:	d003      	beq.n	8001ce0 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2241      	movs	r2, #65	; 0x41
 8001cdc:	2120      	movs	r1, #32
 8001cde:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d03b      	beq.n	8001d6c <I2C_ITError+0x114>
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b11      	cmp	r3, #17
 8001cf8:	d002      	beq.n	8001d00 <I2C_ITError+0xa8>
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b21      	cmp	r3, #33	; 0x21
 8001cfe:	d135      	bne.n	8001d6c <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	01db      	lsls	r3, r3, #7
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	01db      	lsls	r3, r3, #7
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d107      	bne.n	8001d24 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	493c      	ldr	r1, [pc, #240]	; (8001e10 <I2C_ITError+0x1b8>)
 8001d20:	400a      	ands	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f7ff f91e 	bl	8000f6a <HAL_DMA_GetState>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d016      	beq.n	8001d62 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d38:	4a36      	ldr	r2, [pc, #216]	; (8001e14 <I2C_ITError+0x1bc>)
 8001d3a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2240      	movs	r2, #64	; 0x40
 8001d40:	2100      	movs	r1, #0
 8001d42:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f7ff f8c7 	bl	8000edc <HAL_DMA_Abort_IT>
 8001d4e:	1e03      	subs	r3, r0, #0
 8001d50:	d051      	beq.n	8001df6 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001d60:	e049      	b.n	8001df6 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	0018      	movs	r0, r3
 8001d66:	f000 f859 	bl	8001e1c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001d6a:	e044      	b.n	8001df6 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d03b      	beq.n	8001dec <I2C_ITError+0x194>
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b12      	cmp	r3, #18
 8001d78:	d002      	beq.n	8001d80 <I2C_ITError+0x128>
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b22      	cmp	r3, #34	; 0x22
 8001d7e:	d135      	bne.n	8001dec <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d107      	bne.n	8001da4 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	491e      	ldr	r1, [pc, #120]	; (8001e18 <I2C_ITError+0x1c0>)
 8001da0:	400a      	ands	r2, r1
 8001da2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da8:	0018      	movs	r0, r3
 8001daa:	f7ff f8de 	bl	8000f6a <HAL_DMA_GetState>
 8001dae:	0003      	movs	r3, r0
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d016      	beq.n	8001de2 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db8:	4a16      	ldr	r2, [pc, #88]	; (8001e14 <I2C_ITError+0x1bc>)
 8001dba:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2240      	movs	r2, #64	; 0x40
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f7ff f887 	bl	8000edc <HAL_DMA_Abort_IT>
 8001dce:	1e03      	subs	r3, r0, #0
 8001dd0:	d013      	beq.n	8001dfa <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ddc:	0018      	movs	r0, r3
 8001dde:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001de0:	e00b      	b.n	8001dfa <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f000 f819 	bl	8001e1c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001dea:	e006      	b.n	8001dfa <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	0018      	movs	r0, r3
 8001df0:	f000 f814 	bl	8001e1c <I2C_TreatErrorCallback>
  }
}
 8001df4:	e002      	b.n	8001dfc <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	e000      	b.n	8001dfc <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001dfa:	46c0      	nop			; (mov r8, r8)
}
 8001dfc:	46c0      	nop			; (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b004      	add	sp, #16
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	ffff0000 	.word	0xffff0000
 8001e08:	08001521 	.word	0x08001521
 8001e0c:	00008003 	.word	0x00008003
 8001e10:	ffffbfff 	.word	0xffffbfff
 8001e14:	08001eb3 	.word	0x08001eb3
 8001e18:	ffff7fff 	.word	0xffff7fff

08001e1c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2241      	movs	r2, #65	; 0x41
 8001e28:	5c9b      	ldrb	r3, [r3, r2]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b60      	cmp	r3, #96	; 0x60
 8001e2e:	d10f      	bne.n	8001e50 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2241      	movs	r2, #65	; 0x41
 8001e34:	2120      	movs	r1, #32
 8001e36:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2240      	movs	r2, #64	; 0x40
 8001e42:	2100      	movs	r1, #0
 8001e44:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f7ff fb61 	bl	8001510 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001e4e:	e00a      	b.n	8001e66 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2240      	movs	r2, #64	; 0x40
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	0018      	movs	r0, r3
 8001e62:	f7ff fb4d 	bl	8001500 <HAL_I2C_ErrorCallback>
}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b002      	add	sp, #8
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d103      	bne.n	8001e8c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2201      	movs	r2, #1
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d007      	beq.n	8001eaa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699a      	ldr	r2, [r3, #24]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	619a      	str	r2, [r3, #24]
  }
}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b002      	add	sp, #8
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b084      	sub	sp, #16
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ecc:	2200      	movs	r2, #0
 8001ece:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001edc:	2200      	movs	r2, #0
 8001ede:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f7ff ff9a 	bl	8001e1c <I2C_TreatErrorCallback>
}
 8001ee8:	46c0      	nop			; (mov r8, r8)
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b004      	add	sp, #16
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	000a      	movs	r2, r1
 8001efa:	1cbb      	adds	r3, r7, #2
 8001efc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001f02:	1cbb      	adds	r3, r7, #2
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	2201      	movs	r2, #1
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d010      	beq.n	8001f2e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2242      	movs	r2, #66	; 0x42
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2241      	movs	r2, #65	; 0x41
 8001f18:	5c9b      	ldrb	r3, [r3, r2]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	001a      	movs	r2, r3
 8001f1e:	2328      	movs	r3, #40	; 0x28
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b28      	cmp	r3, #40	; 0x28
 8001f24:	d003      	beq.n	8001f2e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	22b0      	movs	r2, #176	; 0xb0
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001f2e:	1cbb      	adds	r3, r7, #2
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	2202      	movs	r2, #2
 8001f34:	4013      	ands	r3, r2
 8001f36:	d010      	beq.n	8001f5a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2244      	movs	r2, #68	; 0x44
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2241      	movs	r2, #65	; 0x41
 8001f44:	5c9b      	ldrb	r3, [r3, r2]
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	001a      	movs	r2, r3
 8001f4a:	2328      	movs	r3, #40	; 0x28
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b28      	cmp	r3, #40	; 0x28
 8001f50:	d003      	beq.n	8001f5a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	22b0      	movs	r2, #176	; 0xb0
 8001f56:	4313      	orrs	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001f5a:	1cbb      	adds	r3, r7, #2
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	5e9b      	ldrsh	r3, [r3, r2]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	da03      	bge.n	8001f6c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	22b8      	movs	r2, #184	; 0xb8
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8001f6c:	1cbb      	adds	r3, r7, #2
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	2b10      	cmp	r3, #16
 8001f72:	d103      	bne.n	8001f7c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2290      	movs	r2, #144	; 0x90
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8001f7c:	1cbb      	adds	r3, r7, #2
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	2b20      	cmp	r3, #32
 8001f82:	d103      	bne.n	8001f8c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2220      	movs	r2, #32
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8001f8c:	1cbb      	adds	r3, r7, #2
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	2b40      	cmp	r3, #64	; 0x40
 8001f92:	d103      	bne.n	8001f9c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2240      	movs	r2, #64	; 0x40
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	43d9      	mvns	r1, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	400a      	ands	r2, r1
 8001fac:	601a      	str	r2, [r3, #0]
}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b004      	add	sp, #16
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2241      	movs	r2, #65	; 0x41
 8001fc6:	5c9b      	ldrb	r3, [r3, r2]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b20      	cmp	r3, #32
 8001fcc:	d138      	bne.n	8002040 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2240      	movs	r2, #64	; 0x40
 8001fd2:	5c9b      	ldrb	r3, [r3, r2]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e032      	b.n	8002042 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2240      	movs	r2, #64	; 0x40
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2241      	movs	r2, #65	; 0x41
 8001fe8:	2124      	movs	r1, #36	; 0x24
 8001fea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	438a      	bics	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4911      	ldr	r1, [pc, #68]	; (800204c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002008:	400a      	ands	r2, r1
 800200a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6819      	ldr	r1, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2101      	movs	r1, #1
 8002028:	430a      	orrs	r2, r1
 800202a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2241      	movs	r2, #65	; 0x41
 8002030:	2120      	movs	r1, #32
 8002032:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2240      	movs	r2, #64	; 0x40
 8002038:	2100      	movs	r1, #0
 800203a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	e000      	b.n	8002042 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002040:	2302      	movs	r3, #2
  }
}
 8002042:	0018      	movs	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	b002      	add	sp, #8
 8002048:	bd80      	pop	{r7, pc}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	ffffefff 	.word	0xffffefff

08002050 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2241      	movs	r2, #65	; 0x41
 800205e:	5c9b      	ldrb	r3, [r3, r2]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b20      	cmp	r3, #32
 8002064:	d139      	bne.n	80020da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2240      	movs	r2, #64	; 0x40
 800206a:	5c9b      	ldrb	r3, [r3, r2]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002070:	2302      	movs	r3, #2
 8002072:	e033      	b.n	80020dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2240      	movs	r2, #64	; 0x40
 8002078:	2101      	movs	r1, #1
 800207a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2241      	movs	r2, #65	; 0x41
 8002080:	2124      	movs	r1, #36	; 0x24
 8002082:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2101      	movs	r1, #1
 8002090:	438a      	bics	r2, r1
 8002092:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4a11      	ldr	r2, [pc, #68]	; (80020e4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2101      	movs	r1, #1
 80020c2:	430a      	orrs	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2241      	movs	r2, #65	; 0x41
 80020ca:	2120      	movs	r1, #32
 80020cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2240      	movs	r2, #64	; 0x40
 80020d2:	2100      	movs	r1, #0
 80020d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e000      	b.n	80020dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020da:	2302      	movs	r3, #2
  }
}
 80020dc:	0018      	movs	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	b004      	add	sp, #16
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	fffff0ff 	.word	0xfffff0ff

080020e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e8:	b5b0      	push	{r4, r5, r7, lr}
 80020ea:	b08a      	sub	sp, #40	; 0x28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	f000 fb6c 	bl	80027d4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020fc:	4bc8      	ldr	r3, [pc, #800]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	220c      	movs	r2, #12
 8002102:	4013      	ands	r3, r2
 8002104:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002106:	4bc6      	ldr	r3, [pc, #792]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	025b      	lsls	r3, r3, #9
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2201      	movs	r2, #1
 8002118:	4013      	ands	r3, r2
 800211a:	d100      	bne.n	800211e <HAL_RCC_OscConfig+0x36>
 800211c:	e07d      	b.n	800221a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	2b08      	cmp	r3, #8
 8002122:	d007      	beq.n	8002134 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	2b0c      	cmp	r3, #12
 8002128:	d112      	bne.n	8002150 <HAL_RCC_OscConfig+0x68>
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	025b      	lsls	r3, r3, #9
 8002130:	429a      	cmp	r2, r3
 8002132:	d10d      	bne.n	8002150 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002134:	4bba      	ldr	r3, [pc, #744]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	029b      	lsls	r3, r3, #10
 800213c:	4013      	ands	r3, r2
 800213e:	d100      	bne.n	8002142 <HAL_RCC_OscConfig+0x5a>
 8002140:	e06a      	b.n	8002218 <HAL_RCC_OscConfig+0x130>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d166      	bne.n	8002218 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	f000 fb42 	bl	80027d4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	025b      	lsls	r3, r3, #9
 8002158:	429a      	cmp	r2, r3
 800215a:	d107      	bne.n	800216c <HAL_RCC_OscConfig+0x84>
 800215c:	4bb0      	ldr	r3, [pc, #704]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4baf      	ldr	r3, [pc, #700]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 8002162:	2180      	movs	r1, #128	; 0x80
 8002164:	0249      	lsls	r1, r1, #9
 8002166:	430a      	orrs	r2, r1
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e027      	b.n	80021bc <HAL_RCC_OscConfig+0xd4>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	23a0      	movs	r3, #160	; 0xa0
 8002172:	02db      	lsls	r3, r3, #11
 8002174:	429a      	cmp	r2, r3
 8002176:	d10e      	bne.n	8002196 <HAL_RCC_OscConfig+0xae>
 8002178:	4ba9      	ldr	r3, [pc, #676]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4ba8      	ldr	r3, [pc, #672]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 800217e:	2180      	movs	r1, #128	; 0x80
 8002180:	02c9      	lsls	r1, r1, #11
 8002182:	430a      	orrs	r2, r1
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	4ba6      	ldr	r3, [pc, #664]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	4ba5      	ldr	r3, [pc, #660]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 800218c:	2180      	movs	r1, #128	; 0x80
 800218e:	0249      	lsls	r1, r1, #9
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	e012      	b.n	80021bc <HAL_RCC_OscConfig+0xd4>
 8002196:	4ba2      	ldr	r3, [pc, #648]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	4ba1      	ldr	r3, [pc, #644]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 800219c:	49a1      	ldr	r1, [pc, #644]	; (8002424 <HAL_RCC_OscConfig+0x33c>)
 800219e:	400a      	ands	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	4b9f      	ldr	r3, [pc, #636]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	025b      	lsls	r3, r3, #9
 80021aa:	4013      	ands	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4b9b      	ldr	r3, [pc, #620]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b9a      	ldr	r3, [pc, #616]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 80021b6:	499c      	ldr	r1, [pc, #624]	; (8002428 <HAL_RCC_OscConfig+0x340>)
 80021b8:	400a      	ands	r2, r1
 80021ba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d014      	beq.n	80021ee <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7fe fda2 	bl	8000d0c <HAL_GetTick>
 80021c8:	0003      	movs	r3, r0
 80021ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ce:	f7fe fd9d 	bl	8000d0c <HAL_GetTick>
 80021d2:	0002      	movs	r2, r0
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b64      	cmp	r3, #100	; 0x64
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e2f9      	b.n	80027d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021e0:	4b8f      	ldr	r3, [pc, #572]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	029b      	lsls	r3, r3, #10
 80021e8:	4013      	ands	r3, r2
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0xe6>
 80021ec:	e015      	b.n	800221a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ee:	f7fe fd8d 	bl	8000d0c <HAL_GetTick>
 80021f2:	0003      	movs	r3, r0
 80021f4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f8:	f7fe fd88 	bl	8000d0c <HAL_GetTick>
 80021fc:	0002      	movs	r2, r0
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e2e4      	b.n	80027d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800220a:	4b85      	ldr	r3, [pc, #532]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	029b      	lsls	r3, r3, #10
 8002212:	4013      	ands	r3, r2
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x110>
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2202      	movs	r2, #2
 8002220:	4013      	ands	r3, r2
 8002222:	d100      	bne.n	8002226 <HAL_RCC_OscConfig+0x13e>
 8002224:	e099      	b.n	800235a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	2220      	movs	r2, #32
 8002230:	4013      	ands	r3, r2
 8002232:	d009      	beq.n	8002248 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002234:	4b7a      	ldr	r3, [pc, #488]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b79      	ldr	r3, [pc, #484]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 800223a:	2120      	movs	r1, #32
 800223c:	430a      	orrs	r2, r1
 800223e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	2220      	movs	r2, #32
 8002244:	4393      	bics	r3, r2
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b04      	cmp	r3, #4
 800224c:	d005      	beq.n	800225a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	2b0c      	cmp	r3, #12
 8002252:	d13e      	bne.n	80022d2 <HAL_RCC_OscConfig+0x1ea>
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d13b      	bne.n	80022d2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800225a:	4b71      	ldr	r3, [pc, #452]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2204      	movs	r2, #4
 8002260:	4013      	ands	r3, r2
 8002262:	d004      	beq.n	800226e <HAL_RCC_OscConfig+0x186>
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e2b2      	b.n	80027d4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226e:	4b6c      	ldr	r3, [pc, #432]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4a6e      	ldr	r2, [pc, #440]	; (800242c <HAL_RCC_OscConfig+0x344>)
 8002274:	4013      	ands	r3, r2
 8002276:	0019      	movs	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	021a      	lsls	r2, r3, #8
 800227e:	4b68      	ldr	r3, [pc, #416]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 8002280:	430a      	orrs	r2, r1
 8002282:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002284:	4b66      	ldr	r3, [pc, #408]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2209      	movs	r2, #9
 800228a:	4393      	bics	r3, r2
 800228c:	0019      	movs	r1, r3
 800228e:	4b64      	ldr	r3, [pc, #400]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 8002290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002292:	430a      	orrs	r2, r1
 8002294:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002296:	f000 fbeb 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 800229a:	0001      	movs	r1, r0
 800229c:	4b60      	ldr	r3, [pc, #384]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	220f      	movs	r2, #15
 80022a4:	4013      	ands	r3, r2
 80022a6:	4a62      	ldr	r2, [pc, #392]	; (8002430 <HAL_RCC_OscConfig+0x348>)
 80022a8:	5cd3      	ldrb	r3, [r2, r3]
 80022aa:	000a      	movs	r2, r1
 80022ac:	40da      	lsrs	r2, r3
 80022ae:	4b61      	ldr	r3, [pc, #388]	; (8002434 <HAL_RCC_OscConfig+0x34c>)
 80022b0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80022b2:	4b61      	ldr	r3, [pc, #388]	; (8002438 <HAL_RCC_OscConfig+0x350>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2513      	movs	r5, #19
 80022b8:	197c      	adds	r4, r7, r5
 80022ba:	0018      	movs	r0, r3
 80022bc:	f7fe fce0 	bl	8000c80 <HAL_InitTick>
 80022c0:	0003      	movs	r3, r0
 80022c2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80022c4:	197b      	adds	r3, r7, r5
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d046      	beq.n	800235a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80022cc:	197b      	adds	r3, r7, r5
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	e280      	b.n	80027d4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d027      	beq.n	8002328 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80022d8:	4b51      	ldr	r3, [pc, #324]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2209      	movs	r2, #9
 80022de:	4393      	bics	r3, r2
 80022e0:	0019      	movs	r1, r3
 80022e2:	4b4f      	ldr	r3, [pc, #316]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 80022e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e6:	430a      	orrs	r2, r1
 80022e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ea:	f7fe fd0f 	bl	8000d0c <HAL_GetTick>
 80022ee:	0003      	movs	r3, r0
 80022f0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f4:	f7fe fd0a 	bl	8000d0c <HAL_GetTick>
 80022f8:	0002      	movs	r2, r0
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e266      	b.n	80027d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002306:	4b46      	ldr	r3, [pc, #280]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2204      	movs	r2, #4
 800230c:	4013      	ands	r3, r2
 800230e:	d0f1      	beq.n	80022f4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002310:	4b43      	ldr	r3, [pc, #268]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4a45      	ldr	r2, [pc, #276]	; (800242c <HAL_RCC_OscConfig+0x344>)
 8002316:	4013      	ands	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	021a      	lsls	r2, r3, #8
 8002320:	4b3f      	ldr	r3, [pc, #252]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 8002322:	430a      	orrs	r2, r1
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	e018      	b.n	800235a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002328:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b3c      	ldr	r3, [pc, #240]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 800232e:	2101      	movs	r1, #1
 8002330:	438a      	bics	r2, r1
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7fe fcea 	bl	8000d0c <HAL_GetTick>
 8002338:	0003      	movs	r3, r0
 800233a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233e:	f7fe fce5 	bl	8000d0c <HAL_GetTick>
 8002342:	0002      	movs	r2, r0
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e241      	b.n	80027d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002350:	4b33      	ldr	r3, [pc, #204]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2204      	movs	r2, #4
 8002356:	4013      	ands	r3, r2
 8002358:	d1f1      	bne.n	800233e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2210      	movs	r2, #16
 8002360:	4013      	ands	r3, r2
 8002362:	d100      	bne.n	8002366 <HAL_RCC_OscConfig+0x27e>
 8002364:	e0a1      	b.n	80024aa <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d140      	bne.n	80023ee <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800236c:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4013      	ands	r3, r2
 8002376:	d005      	beq.n	8002384 <HAL_RCC_OscConfig+0x29c>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e227      	b.n	80027d4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002384:	4b26      	ldr	r3, [pc, #152]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	4a2c      	ldr	r2, [pc, #176]	; (800243c <HAL_RCC_OscConfig+0x354>)
 800238a:	4013      	ands	r3, r2
 800238c:	0019      	movs	r1, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a1a      	ldr	r2, [r3, #32]
 8002392:	4b23      	ldr	r3, [pc, #140]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 8002394:	430a      	orrs	r2, r1
 8002396:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002398:	4b21      	ldr	r3, [pc, #132]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	021b      	lsls	r3, r3, #8
 800239e:	0a19      	lsrs	r1, r3, #8
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	061a      	lsls	r2, r3, #24
 80023a6:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 80023a8:	430a      	orrs	r2, r1
 80023aa:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	0b5b      	lsrs	r3, r3, #13
 80023b2:	3301      	adds	r3, #1
 80023b4:	2280      	movs	r2, #128	; 0x80
 80023b6:	0212      	lsls	r2, r2, #8
 80023b8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80023ba:	4b19      	ldr	r3, [pc, #100]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	091b      	lsrs	r3, r3, #4
 80023c0:	210f      	movs	r1, #15
 80023c2:	400b      	ands	r3, r1
 80023c4:	491a      	ldr	r1, [pc, #104]	; (8002430 <HAL_RCC_OscConfig+0x348>)
 80023c6:	5ccb      	ldrb	r3, [r1, r3]
 80023c8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80023ca:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <HAL_RCC_OscConfig+0x34c>)
 80023cc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80023ce:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <HAL_RCC_OscConfig+0x350>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2513      	movs	r5, #19
 80023d4:	197c      	adds	r4, r7, r5
 80023d6:	0018      	movs	r0, r3
 80023d8:	f7fe fc52 	bl	8000c80 <HAL_InitTick>
 80023dc:	0003      	movs	r3, r0
 80023de:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80023e0:	197b      	adds	r3, r7, r5
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d060      	beq.n	80024aa <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80023e8:	197b      	adds	r3, r7, r5
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	e1f2      	b.n	80027d4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d03f      	beq.n	8002476 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023f6:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_OscConfig+0x338>)
 80023fc:	2180      	movs	r1, #128	; 0x80
 80023fe:	0049      	lsls	r1, r1, #1
 8002400:	430a      	orrs	r2, r1
 8002402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7fe fc82 	bl	8000d0c <HAL_GetTick>
 8002408:	0003      	movs	r3, r0
 800240a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800240c:	e018      	b.n	8002440 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800240e:	f7fe fc7d 	bl	8000d0c <HAL_GetTick>
 8002412:	0002      	movs	r2, r0
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d911      	bls.n	8002440 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e1d9      	b.n	80027d4 <HAL_RCC_OscConfig+0x6ec>
 8002420:	40021000 	.word	0x40021000
 8002424:	fffeffff 	.word	0xfffeffff
 8002428:	fffbffff 	.word	0xfffbffff
 800242c:	ffffe0ff 	.word	0xffffe0ff
 8002430:	08002e78 	.word	0x08002e78
 8002434:	20000000 	.word	0x20000000
 8002438:	20000004 	.word	0x20000004
 800243c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002440:	4bc9      	ldr	r3, [pc, #804]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4013      	ands	r3, r2
 800244a:	d0e0      	beq.n	800240e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800244c:	4bc6      	ldr	r3, [pc, #792]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	4ac6      	ldr	r2, [pc, #792]	; (800276c <HAL_RCC_OscConfig+0x684>)
 8002452:	4013      	ands	r3, r2
 8002454:	0019      	movs	r1, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1a      	ldr	r2, [r3, #32]
 800245a:	4bc3      	ldr	r3, [pc, #780]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 800245c:	430a      	orrs	r2, r1
 800245e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002460:	4bc1      	ldr	r3, [pc, #772]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	0a19      	lsrs	r1, r3, #8
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	061a      	lsls	r2, r3, #24
 800246e:	4bbe      	ldr	r3, [pc, #760]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 8002470:	430a      	orrs	r2, r1
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	e019      	b.n	80024aa <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002476:	4bbc      	ldr	r3, [pc, #752]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4bbb      	ldr	r3, [pc, #748]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 800247c:	49bc      	ldr	r1, [pc, #752]	; (8002770 <HAL_RCC_OscConfig+0x688>)
 800247e:	400a      	ands	r2, r1
 8002480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002482:	f7fe fc43 	bl	8000d0c <HAL_GetTick>
 8002486:	0003      	movs	r3, r0
 8002488:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800248c:	f7fe fc3e 	bl	8000d0c <HAL_GetTick>
 8002490:	0002      	movs	r2, r0
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e19a      	b.n	80027d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800249e:	4bb2      	ldr	r3, [pc, #712]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4013      	ands	r3, r2
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2208      	movs	r2, #8
 80024b0:	4013      	ands	r3, r2
 80024b2:	d036      	beq.n	8002522 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d019      	beq.n	80024f0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024bc:	4baa      	ldr	r3, [pc, #680]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80024be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024c0:	4ba9      	ldr	r3, [pc, #676]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80024c2:	2101      	movs	r1, #1
 80024c4:	430a      	orrs	r2, r1
 80024c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c8:	f7fe fc20 	bl	8000d0c <HAL_GetTick>
 80024cc:	0003      	movs	r3, r0
 80024ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d2:	f7fe fc1b 	bl	8000d0c <HAL_GetTick>
 80024d6:	0002      	movs	r2, r0
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e177      	b.n	80027d4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024e4:	4ba0      	ldr	r3, [pc, #640]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80024e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e8:	2202      	movs	r2, #2
 80024ea:	4013      	ands	r3, r2
 80024ec:	d0f1      	beq.n	80024d2 <HAL_RCC_OscConfig+0x3ea>
 80024ee:	e018      	b.n	8002522 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f0:	4b9d      	ldr	r3, [pc, #628]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80024f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024f4:	4b9c      	ldr	r3, [pc, #624]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80024f6:	2101      	movs	r1, #1
 80024f8:	438a      	bics	r2, r1
 80024fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fc:	f7fe fc06 	bl	8000d0c <HAL_GetTick>
 8002500:	0003      	movs	r3, r0
 8002502:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002506:	f7fe fc01 	bl	8000d0c <HAL_GetTick>
 800250a:	0002      	movs	r2, r0
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e15d      	b.n	80027d4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002518:	4b93      	ldr	r3, [pc, #588]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 800251a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800251c:	2202      	movs	r2, #2
 800251e:	4013      	ands	r3, r2
 8002520:	d1f1      	bne.n	8002506 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2204      	movs	r2, #4
 8002528:	4013      	ands	r3, r2
 800252a:	d100      	bne.n	800252e <HAL_RCC_OscConfig+0x446>
 800252c:	e0ae      	b.n	800268c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252e:	2023      	movs	r0, #35	; 0x23
 8002530:	183b      	adds	r3, r7, r0
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002536:	4b8c      	ldr	r3, [pc, #560]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 8002538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	055b      	lsls	r3, r3, #21
 800253e:	4013      	ands	r3, r2
 8002540:	d109      	bne.n	8002556 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002542:	4b89      	ldr	r3, [pc, #548]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 8002544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002546:	4b88      	ldr	r3, [pc, #544]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	0549      	lsls	r1, r1, #21
 800254c:	430a      	orrs	r2, r1
 800254e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002550:	183b      	adds	r3, r7, r0
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002556:	4b87      	ldr	r3, [pc, #540]	; (8002774 <HAL_RCC_OscConfig+0x68c>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4013      	ands	r3, r2
 8002560:	d11a      	bne.n	8002598 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002562:	4b84      	ldr	r3, [pc, #528]	; (8002774 <HAL_RCC_OscConfig+0x68c>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4b83      	ldr	r3, [pc, #524]	; (8002774 <HAL_RCC_OscConfig+0x68c>)
 8002568:	2180      	movs	r1, #128	; 0x80
 800256a:	0049      	lsls	r1, r1, #1
 800256c:	430a      	orrs	r2, r1
 800256e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002570:	f7fe fbcc 	bl	8000d0c <HAL_GetTick>
 8002574:	0003      	movs	r3, r0
 8002576:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257a:	f7fe fbc7 	bl	8000d0c <HAL_GetTick>
 800257e:	0002      	movs	r2, r0
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b64      	cmp	r3, #100	; 0x64
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e123      	b.n	80027d4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258c:	4b79      	ldr	r3, [pc, #484]	; (8002774 <HAL_RCC_OscConfig+0x68c>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4013      	ands	r3, r2
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_OscConfig+0x4cc>
 80025a4:	4b70      	ldr	r3, [pc, #448]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80025a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025a8:	4b6f      	ldr	r3, [pc, #444]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80025aa:	2180      	movs	r1, #128	; 0x80
 80025ac:	0049      	lsls	r1, r1, #1
 80025ae:	430a      	orrs	r2, r1
 80025b0:	651a      	str	r2, [r3, #80]	; 0x50
 80025b2:	e031      	b.n	8002618 <HAL_RCC_OscConfig+0x530>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10c      	bne.n	80025d6 <HAL_RCC_OscConfig+0x4ee>
 80025bc:	4b6a      	ldr	r3, [pc, #424]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80025be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025c0:	4b69      	ldr	r3, [pc, #420]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80025c2:	496b      	ldr	r1, [pc, #428]	; (8002770 <HAL_RCC_OscConfig+0x688>)
 80025c4:	400a      	ands	r2, r1
 80025c6:	651a      	str	r2, [r3, #80]	; 0x50
 80025c8:	4b67      	ldr	r3, [pc, #412]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80025ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025cc:	4b66      	ldr	r3, [pc, #408]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80025ce:	496a      	ldr	r1, [pc, #424]	; (8002778 <HAL_RCC_OscConfig+0x690>)
 80025d0:	400a      	ands	r2, r1
 80025d2:	651a      	str	r2, [r3, #80]	; 0x50
 80025d4:	e020      	b.n	8002618 <HAL_RCC_OscConfig+0x530>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	23a0      	movs	r3, #160	; 0xa0
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	429a      	cmp	r2, r3
 80025e0:	d10e      	bne.n	8002600 <HAL_RCC_OscConfig+0x518>
 80025e2:	4b61      	ldr	r3, [pc, #388]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80025e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025e6:	4b60      	ldr	r3, [pc, #384]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80025e8:	2180      	movs	r1, #128	; 0x80
 80025ea:	00c9      	lsls	r1, r1, #3
 80025ec:	430a      	orrs	r2, r1
 80025ee:	651a      	str	r2, [r3, #80]	; 0x50
 80025f0:	4b5d      	ldr	r3, [pc, #372]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80025f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025f4:	4b5c      	ldr	r3, [pc, #368]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80025f6:	2180      	movs	r1, #128	; 0x80
 80025f8:	0049      	lsls	r1, r1, #1
 80025fa:	430a      	orrs	r2, r1
 80025fc:	651a      	str	r2, [r3, #80]	; 0x50
 80025fe:	e00b      	b.n	8002618 <HAL_RCC_OscConfig+0x530>
 8002600:	4b59      	ldr	r3, [pc, #356]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 8002602:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002604:	4b58      	ldr	r3, [pc, #352]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 8002606:	495a      	ldr	r1, [pc, #360]	; (8002770 <HAL_RCC_OscConfig+0x688>)
 8002608:	400a      	ands	r2, r1
 800260a:	651a      	str	r2, [r3, #80]	; 0x50
 800260c:	4b56      	ldr	r3, [pc, #344]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 800260e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002610:	4b55      	ldr	r3, [pc, #340]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 8002612:	4959      	ldr	r1, [pc, #356]	; (8002778 <HAL_RCC_OscConfig+0x690>)
 8002614:	400a      	ands	r2, r1
 8002616:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d015      	beq.n	800264c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002620:	f7fe fb74 	bl	8000d0c <HAL_GetTick>
 8002624:	0003      	movs	r3, r0
 8002626:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002628:	e009      	b.n	800263e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800262a:	f7fe fb6f 	bl	8000d0c <HAL_GetTick>
 800262e:	0002      	movs	r2, r0
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	4a51      	ldr	r2, [pc, #324]	; (800277c <HAL_RCC_OscConfig+0x694>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e0ca      	b.n	80027d4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800263e:	4b4a      	ldr	r3, [pc, #296]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 8002640:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4013      	ands	r3, r2
 8002648:	d0ef      	beq.n	800262a <HAL_RCC_OscConfig+0x542>
 800264a:	e014      	b.n	8002676 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264c:	f7fe fb5e 	bl	8000d0c <HAL_GetTick>
 8002650:	0003      	movs	r3, r0
 8002652:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002654:	e009      	b.n	800266a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7fe fb59 	bl	8000d0c <HAL_GetTick>
 800265a:	0002      	movs	r2, r0
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	4a46      	ldr	r2, [pc, #280]	; (800277c <HAL_RCC_OscConfig+0x694>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e0b4      	b.n	80027d4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800266a:	4b3f      	ldr	r3, [pc, #252]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 800266c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4013      	ands	r3, r2
 8002674:	d1ef      	bne.n	8002656 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002676:	2323      	movs	r3, #35	; 0x23
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d105      	bne.n	800268c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002680:	4b39      	ldr	r3, [pc, #228]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 8002682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002684:	4b38      	ldr	r3, [pc, #224]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 8002686:	493e      	ldr	r1, [pc, #248]	; (8002780 <HAL_RCC_OscConfig+0x698>)
 8002688:	400a      	ands	r2, r1
 800268a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	2b00      	cmp	r3, #0
 8002692:	d100      	bne.n	8002696 <HAL_RCC_OscConfig+0x5ae>
 8002694:	e09d      	b.n	80027d2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	2b0c      	cmp	r3, #12
 800269a:	d100      	bne.n	800269e <HAL_RCC_OscConfig+0x5b6>
 800269c:	e076      	b.n	800278c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d145      	bne.n	8002732 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a6:	4b30      	ldr	r3, [pc, #192]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	4b2f      	ldr	r3, [pc, #188]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80026ac:	4935      	ldr	r1, [pc, #212]	; (8002784 <HAL_RCC_OscConfig+0x69c>)
 80026ae:	400a      	ands	r2, r1
 80026b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b2:	f7fe fb2b 	bl	8000d0c <HAL_GetTick>
 80026b6:	0003      	movs	r3, r0
 80026b8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026bc:	f7fe fb26 	bl	8000d0c <HAL_GetTick>
 80026c0:	0002      	movs	r2, r0
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e082      	b.n	80027d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80026ce:	4b26      	ldr	r3, [pc, #152]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	049b      	lsls	r3, r3, #18
 80026d6:	4013      	ands	r3, r2
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026da:	4b23      	ldr	r3, [pc, #140]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	4a2a      	ldr	r2, [pc, #168]	; (8002788 <HAL_RCC_OscConfig+0x6a0>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	0019      	movs	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	431a      	orrs	r2, r3
 80026f4:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80026f6:	430a      	orrs	r2, r1
 80026f8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026fa:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 8002700:	2180      	movs	r1, #128	; 0x80
 8002702:	0449      	lsls	r1, r1, #17
 8002704:	430a      	orrs	r2, r1
 8002706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7fe fb00 	bl	8000d0c <HAL_GetTick>
 800270c:	0003      	movs	r3, r0
 800270e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002712:	f7fe fafb 	bl	8000d0c <HAL_GetTick>
 8002716:	0002      	movs	r2, r0
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e057      	b.n	80027d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002724:	4b10      	ldr	r3, [pc, #64]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	049b      	lsls	r3, r3, #18
 800272c:	4013      	ands	r3, r2
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x62a>
 8002730:	e04f      	b.n	80027d2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002732:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 8002738:	4912      	ldr	r1, [pc, #72]	; (8002784 <HAL_RCC_OscConfig+0x69c>)
 800273a:	400a      	ands	r2, r1
 800273c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7fe fae5 	bl	8000d0c <HAL_GetTick>
 8002742:	0003      	movs	r3, r0
 8002744:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002748:	f7fe fae0 	bl	8000d0c <HAL_GetTick>
 800274c:	0002      	movs	r2, r0
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e03c      	b.n	80027d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800275a:	4b03      	ldr	r3, [pc, #12]	; (8002768 <HAL_RCC_OscConfig+0x680>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	049b      	lsls	r3, r3, #18
 8002762:	4013      	ands	r3, r2
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0x660>
 8002766:	e034      	b.n	80027d2 <HAL_RCC_OscConfig+0x6ea>
 8002768:	40021000 	.word	0x40021000
 800276c:	ffff1fff 	.word	0xffff1fff
 8002770:	fffffeff 	.word	0xfffffeff
 8002774:	40007000 	.word	0x40007000
 8002778:	fffffbff 	.word	0xfffffbff
 800277c:	00001388 	.word	0x00001388
 8002780:	efffffff 	.word	0xefffffff
 8002784:	feffffff 	.word	0xfeffffff
 8002788:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e01d      	b.n	80027d4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002798:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_RCC_OscConfig+0x6f4>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	025b      	lsls	r3, r3, #9
 80027a4:	401a      	ands	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d10f      	bne.n	80027ce <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	23f0      	movs	r3, #240	; 0xf0
 80027b2:	039b      	lsls	r3, r3, #14
 80027b4:	401a      	ands	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	23c0      	movs	r3, #192	; 0xc0
 80027c2:	041b      	lsls	r3, r3, #16
 80027c4:	401a      	ands	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d001      	beq.n	80027d2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	0018      	movs	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b00a      	add	sp, #40	; 0x28
 80027da:	bdb0      	pop	{r4, r5, r7, pc}
 80027dc:	40021000 	.word	0x40021000

080027e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e0:	b5b0      	push	{r4, r5, r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e128      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f4:	4b96      	ldr	r3, [pc, #600]	; (8002a50 <HAL_RCC_ClockConfig+0x270>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2201      	movs	r2, #1
 80027fa:	4013      	ands	r3, r2
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d91e      	bls.n	8002840 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b93      	ldr	r3, [pc, #588]	; (8002a50 <HAL_RCC_ClockConfig+0x270>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2201      	movs	r2, #1
 8002808:	4393      	bics	r3, r2
 800280a:	0019      	movs	r1, r3
 800280c:	4b90      	ldr	r3, [pc, #576]	; (8002a50 <HAL_RCC_ClockConfig+0x270>)
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002814:	f7fe fa7a 	bl	8000d0c <HAL_GetTick>
 8002818:	0003      	movs	r3, r0
 800281a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281c:	e009      	b.n	8002832 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281e:	f7fe fa75 	bl	8000d0c <HAL_GetTick>
 8002822:	0002      	movs	r2, r0
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	4a8a      	ldr	r2, [pc, #552]	; (8002a54 <HAL_RCC_ClockConfig+0x274>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e109      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b87      	ldr	r3, [pc, #540]	; (8002a50 <HAL_RCC_ClockConfig+0x270>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2201      	movs	r2, #1
 8002838:	4013      	ands	r3, r2
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d1ee      	bne.n	800281e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2202      	movs	r2, #2
 8002846:	4013      	ands	r3, r2
 8002848:	d009      	beq.n	800285e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800284a:	4b83      	ldr	r3, [pc, #524]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	22f0      	movs	r2, #240	; 0xf0
 8002850:	4393      	bics	r3, r2
 8002852:	0019      	movs	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	4b7f      	ldr	r3, [pc, #508]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 800285a:	430a      	orrs	r2, r1
 800285c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2201      	movs	r2, #1
 8002864:	4013      	ands	r3, r2
 8002866:	d100      	bne.n	800286a <HAL_RCC_ClockConfig+0x8a>
 8002868:	e089      	b.n	800297e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d107      	bne.n	8002882 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002872:	4b79      	ldr	r3, [pc, #484]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	029b      	lsls	r3, r3, #10
 800287a:	4013      	ands	r3, r2
 800287c:	d120      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e0e1      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b03      	cmp	r3, #3
 8002888:	d107      	bne.n	800289a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800288a:	4b73      	ldr	r3, [pc, #460]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	049b      	lsls	r3, r3, #18
 8002892:	4013      	ands	r3, r2
 8002894:	d114      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e0d5      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d106      	bne.n	80028b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028a2:	4b6d      	ldr	r3, [pc, #436]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2204      	movs	r2, #4
 80028a8:	4013      	ands	r3, r2
 80028aa:	d109      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0ca      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028b0:	4b69      	ldr	r3, [pc, #420]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4013      	ands	r3, r2
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0c2      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c0:	4b65      	ldr	r3, [pc, #404]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2203      	movs	r2, #3
 80028c6:	4393      	bics	r3, r2
 80028c8:	0019      	movs	r1, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	4b62      	ldr	r3, [pc, #392]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 80028d0:	430a      	orrs	r2, r1
 80028d2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d4:	f7fe fa1a 	bl	8000d0c <HAL_GetTick>
 80028d8:	0003      	movs	r3, r0
 80028da:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d111      	bne.n	8002908 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028e4:	e009      	b.n	80028fa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e6:	f7fe fa11 	bl	8000d0c <HAL_GetTick>
 80028ea:	0002      	movs	r2, r0
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <HAL_RCC_ClockConfig+0x274>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e0a5      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028fa:	4b57      	ldr	r3, [pc, #348]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	220c      	movs	r2, #12
 8002900:	4013      	ands	r3, r2
 8002902:	2b08      	cmp	r3, #8
 8002904:	d1ef      	bne.n	80028e6 <HAL_RCC_ClockConfig+0x106>
 8002906:	e03a      	b.n	800297e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b03      	cmp	r3, #3
 800290e:	d111      	bne.n	8002934 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002910:	e009      	b.n	8002926 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002912:	f7fe f9fb 	bl	8000d0c <HAL_GetTick>
 8002916:	0002      	movs	r2, r0
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	4a4d      	ldr	r2, [pc, #308]	; (8002a54 <HAL_RCC_ClockConfig+0x274>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e08f      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002926:	4b4c      	ldr	r3, [pc, #304]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	220c      	movs	r2, #12
 800292c:	4013      	ands	r3, r2
 800292e:	2b0c      	cmp	r3, #12
 8002930:	d1ef      	bne.n	8002912 <HAL_RCC_ClockConfig+0x132>
 8002932:	e024      	b.n	800297e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d11b      	bne.n	8002974 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800293c:	e009      	b.n	8002952 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800293e:	f7fe f9e5 	bl	8000d0c <HAL_GetTick>
 8002942:	0002      	movs	r2, r0
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	4a42      	ldr	r2, [pc, #264]	; (8002a54 <HAL_RCC_ClockConfig+0x274>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e079      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002952:	4b41      	ldr	r3, [pc, #260]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	220c      	movs	r2, #12
 8002958:	4013      	ands	r3, r2
 800295a:	2b04      	cmp	r3, #4
 800295c:	d1ef      	bne.n	800293e <HAL_RCC_ClockConfig+0x15e>
 800295e:	e00e      	b.n	800297e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002960:	f7fe f9d4 	bl	8000d0c <HAL_GetTick>
 8002964:	0002      	movs	r2, r0
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	4a3a      	ldr	r2, [pc, #232]	; (8002a54 <HAL_RCC_ClockConfig+0x274>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e068      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002974:	4b38      	ldr	r3, [pc, #224]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	220c      	movs	r2, #12
 800297a:	4013      	ands	r3, r2
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800297e:	4b34      	ldr	r3, [pc, #208]	; (8002a50 <HAL_RCC_ClockConfig+0x270>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2201      	movs	r2, #1
 8002984:	4013      	ands	r3, r2
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d21e      	bcs.n	80029ca <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298c:	4b30      	ldr	r3, [pc, #192]	; (8002a50 <HAL_RCC_ClockConfig+0x270>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2201      	movs	r2, #1
 8002992:	4393      	bics	r3, r2
 8002994:	0019      	movs	r1, r3
 8002996:	4b2e      	ldr	r3, [pc, #184]	; (8002a50 <HAL_RCC_ClockConfig+0x270>)
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800299e:	f7fe f9b5 	bl	8000d0c <HAL_GetTick>
 80029a2:	0003      	movs	r3, r0
 80029a4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	e009      	b.n	80029bc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a8:	f7fe f9b0 	bl	8000d0c <HAL_GetTick>
 80029ac:	0002      	movs	r2, r0
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	4a28      	ldr	r2, [pc, #160]	; (8002a54 <HAL_RCC_ClockConfig+0x274>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e044      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029bc:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_RCC_ClockConfig+0x270>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2201      	movs	r2, #1
 80029c2:	4013      	ands	r3, r2
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d1ee      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2204      	movs	r2, #4
 80029d0:	4013      	ands	r3, r2
 80029d2:	d009      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d4:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4a20      	ldr	r2, [pc, #128]	; (8002a5c <HAL_RCC_ClockConfig+0x27c>)
 80029da:	4013      	ands	r3, r2
 80029dc:	0019      	movs	r1, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 80029e4:	430a      	orrs	r2, r1
 80029e6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2208      	movs	r2, #8
 80029ee:	4013      	ands	r3, r2
 80029f0:	d00a      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029f2:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	4a1a      	ldr	r2, [pc, #104]	; (8002a60 <HAL_RCC_ClockConfig+0x280>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	0019      	movs	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	00da      	lsls	r2, r3, #3
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 8002a04:	430a      	orrs	r2, r1
 8002a06:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a08:	f000 f832 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 8002a0c:	0001      	movs	r1, r0
 8002a0e:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	220f      	movs	r2, #15
 8002a16:	4013      	ands	r3, r2
 8002a18:	4a12      	ldr	r2, [pc, #72]	; (8002a64 <HAL_RCC_ClockConfig+0x284>)
 8002a1a:	5cd3      	ldrb	r3, [r2, r3]
 8002a1c:	000a      	movs	r2, r1
 8002a1e:	40da      	lsrs	r2, r3
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_RCC_ClockConfig+0x288>)
 8002a22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <HAL_RCC_ClockConfig+0x28c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	250b      	movs	r5, #11
 8002a2a:	197c      	adds	r4, r7, r5
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f7fe f927 	bl	8000c80 <HAL_InitTick>
 8002a32:	0003      	movs	r3, r0
 8002a34:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002a36:	197b      	adds	r3, r7, r5
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002a3e:	197b      	adds	r3, r7, r5
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	e000      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	0018      	movs	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b004      	add	sp, #16
 8002a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	40022000 	.word	0x40022000
 8002a54:	00001388 	.word	0x00001388
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	fffff8ff 	.word	0xfffff8ff
 8002a60:	ffffc7ff 	.word	0xffffc7ff
 8002a64:	08002e78 	.word	0x08002e78
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	20000004 	.word	0x20000004

08002a70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a70:	b5b0      	push	{r4, r5, r7, lr}
 8002a72:	b08e      	sub	sp, #56	; 0x38
 8002a74:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002a76:	4b4c      	ldr	r3, [pc, #304]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a7e:	230c      	movs	r3, #12
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b0c      	cmp	r3, #12
 8002a84:	d014      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8002a86:	d900      	bls.n	8002a8a <HAL_RCC_GetSysClockFreq+0x1a>
 8002a88:	e07b      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x112>
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d002      	beq.n	8002a94 <HAL_RCC_GetSysClockFreq+0x24>
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d00b      	beq.n	8002aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8002a92:	e076      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002a94:	4b44      	ldr	r3, [pc, #272]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2210      	movs	r2, #16
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d002      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002a9e:	4b43      	ldr	r3, [pc, #268]	; (8002bac <HAL_RCC_GetSysClockFreq+0x13c>)
 8002aa0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002aa2:	e07c      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002aa4:	4b42      	ldr	r3, [pc, #264]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002aa6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002aa8:	e079      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aaa:	4b42      	ldr	r3, [pc, #264]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002aac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002aae:	e076      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab2:	0c9a      	lsrs	r2, r3, #18
 8002ab4:	230f      	movs	r3, #15
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	4b3f      	ldr	r3, [pc, #252]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x148>)
 8002aba:	5c9b      	ldrb	r3, [r3, r2]
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac0:	0d9a      	lsrs	r2, r3, #22
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aca:	4b37      	ldr	r3, [pc, #220]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	2380      	movs	r3, #128	; 0x80
 8002ad0:	025b      	lsls	r3, r3, #9
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d01a      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	4a35      	ldr	r2, [pc, #212]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	69b8      	ldr	r0, [r7, #24]
 8002ae4:	69f9      	ldr	r1, [r7, #28]
 8002ae6:	f7fd fbbb 	bl	8000260 <__aeabi_lmul>
 8002aea:	0002      	movs	r2, r0
 8002aec:	000b      	movs	r3, r1
 8002aee:	0010      	movs	r0, r2
 8002af0:	0019      	movs	r1, r3
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f7fd fb8f 	bl	8000220 <__aeabi_uldivmod>
 8002b02:	0002      	movs	r2, r0
 8002b04:	000b      	movs	r3, r1
 8002b06:	0013      	movs	r3, r2
 8002b08:	637b      	str	r3, [r7, #52]	; 0x34
 8002b0a:	e037      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002b0c:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2210      	movs	r2, #16
 8002b12:	4013      	ands	r3, r2
 8002b14:	d01a      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	4a23      	ldr	r2, [pc, #140]	; (8002bac <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b20:	2300      	movs	r3, #0
 8002b22:	68b8      	ldr	r0, [r7, #8]
 8002b24:	68f9      	ldr	r1, [r7, #12]
 8002b26:	f7fd fb9b 	bl	8000260 <__aeabi_lmul>
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	000b      	movs	r3, r1
 8002b2e:	0010      	movs	r0, r2
 8002b30:	0019      	movs	r1, r3
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	603b      	str	r3, [r7, #0]
 8002b36:	2300      	movs	r3, #0
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f7fd fb6f 	bl	8000220 <__aeabi_uldivmod>
 8002b42:	0002      	movs	r2, r0
 8002b44:	000b      	movs	r3, r1
 8002b46:	0013      	movs	r3, r2
 8002b48:	637b      	str	r3, [r7, #52]	; 0x34
 8002b4a:	e017      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4e:	0018      	movs	r0, r3
 8002b50:	2300      	movs	r3, #0
 8002b52:	0019      	movs	r1, r3
 8002b54:	4a16      	ldr	r2, [pc, #88]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002b56:	2300      	movs	r3, #0
 8002b58:	f7fd fb82 	bl	8000260 <__aeabi_lmul>
 8002b5c:	0002      	movs	r2, r0
 8002b5e:	000b      	movs	r3, r1
 8002b60:	0010      	movs	r0, r2
 8002b62:	0019      	movs	r1, r3
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	001c      	movs	r4, r3
 8002b68:	2300      	movs	r3, #0
 8002b6a:	001d      	movs	r5, r3
 8002b6c:	0022      	movs	r2, r4
 8002b6e:	002b      	movs	r3, r5
 8002b70:	f7fd fb56 	bl	8000220 <__aeabi_uldivmod>
 8002b74:	0002      	movs	r2, r0
 8002b76:	000b      	movs	r3, r1
 8002b78:	0013      	movs	r3, r2
 8002b7a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b80:	e00d      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	0b5b      	lsrs	r3, r3, #13
 8002b88:	2207      	movs	r2, #7
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	3301      	adds	r3, #1
 8002b92:	2280      	movs	r2, #128	; 0x80
 8002b94:	0212      	lsls	r2, r2, #8
 8002b96:	409a      	lsls	r2, r3
 8002b98:	0013      	movs	r3, r2
 8002b9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b9c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b00e      	add	sp, #56	; 0x38
 8002ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	003d0900 	.word	0x003d0900
 8002bb0:	00f42400 	.word	0x00f42400
 8002bb4:	007a1200 	.word	0x007a1200
 8002bb8:	08002e88 	.word	0x08002e88

08002bbc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002bc4:	2017      	movs	r0, #23
 8002bc6:	183b      	adds	r3, r7, r0
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d100      	bne.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002bd6:	e0c2      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd8:	4b81      	ldr	r3, [pc, #516]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	055b      	lsls	r3, r3, #21
 8002be0:	4013      	ands	r3, r2
 8002be2:	d109      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be4:	4b7e      	ldr	r3, [pc, #504]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be8:	4b7d      	ldr	r3, [pc, #500]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bea:	2180      	movs	r1, #128	; 0x80
 8002bec:	0549      	lsls	r1, r1, #21
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002bf2:	183b      	adds	r3, r7, r0
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf8:	4b7a      	ldr	r3, [pc, #488]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4013      	ands	r3, r2
 8002c02:	d11a      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c04:	4b77      	ldr	r3, [pc, #476]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4b76      	ldr	r3, [pc, #472]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c0a:	2180      	movs	r1, #128	; 0x80
 8002c0c:	0049      	lsls	r1, r1, #1
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c12:	f7fe f87b 	bl	8000d0c <HAL_GetTick>
 8002c16:	0003      	movs	r3, r0
 8002c18:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1a:	e008      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1c:	f7fe f876 	bl	8000d0c <HAL_GetTick>
 8002c20:	0002      	movs	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e0d4      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2e:	4b6d      	ldr	r3, [pc, #436]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4013      	ands	r3, r2
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002c3a:	4b69      	ldr	r3, [pc, #420]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	23c0      	movs	r3, #192	; 0xc0
 8002c40:	039b      	lsls	r3, r3, #14
 8002c42:	4013      	ands	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	23c0      	movs	r3, #192	; 0xc0
 8002c4c:	039b      	lsls	r3, r3, #14
 8002c4e:	4013      	ands	r3, r2
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d013      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	23c0      	movs	r3, #192	; 0xc0
 8002c5c:	029b      	lsls	r3, r3, #10
 8002c5e:	401a      	ands	r2, r3
 8002c60:	23c0      	movs	r3, #192	; 0xc0
 8002c62:	029b      	lsls	r3, r3, #10
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d10a      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002c68:	4b5d      	ldr	r3, [pc, #372]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	029b      	lsls	r3, r3, #10
 8002c70:	401a      	ands	r2, r3
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	029b      	lsls	r3, r3, #10
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d101      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e0ac      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002c7e:	4b58      	ldr	r3, [pc, #352]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c82:	23c0      	movs	r3, #192	; 0xc0
 8002c84:	029b      	lsls	r3, r3, #10
 8002c86:	4013      	ands	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d03b      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	23c0      	movs	r3, #192	; 0xc0
 8002c96:	029b      	lsls	r3, r3, #10
 8002c98:	4013      	ands	r3, r2
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d033      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d02e      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002caa:	4b4d      	ldr	r3, [pc, #308]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cae:	4a4e      	ldr	r2, [pc, #312]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cb4:	4b4a      	ldr	r3, [pc, #296]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002cb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cb8:	4b49      	ldr	r3, [pc, #292]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002cba:	2180      	movs	r1, #128	; 0x80
 8002cbc:	0309      	lsls	r1, r1, #12
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cc2:	4b47      	ldr	r3, [pc, #284]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002cc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cc6:	4b46      	ldr	r3, [pc, #280]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002cc8:	4948      	ldr	r1, [pc, #288]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002cca:	400a      	ands	r2, r1
 8002ccc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002cce:	4b44      	ldr	r3, [pc, #272]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d014      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cde:	f7fe f815 	bl	8000d0c <HAL_GetTick>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ce6:	e009      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce8:	f7fe f810 	bl	8000d0c <HAL_GetTick>
 8002cec:	0002      	movs	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	4a3f      	ldr	r2, [pc, #252]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e06d      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cfc:	4b38      	ldr	r3, [pc, #224]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002cfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d00:	2380      	movs	r3, #128	; 0x80
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4013      	ands	r3, r2
 8002d06:	d0ef      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	23c0      	movs	r3, #192	; 0xc0
 8002d0e:	029b      	lsls	r3, r3, #10
 8002d10:	401a      	ands	r2, r3
 8002d12:	23c0      	movs	r3, #192	; 0xc0
 8002d14:	029b      	lsls	r3, r3, #10
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002d1a:	4b31      	ldr	r3, [pc, #196]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a35      	ldr	r2, [pc, #212]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	0019      	movs	r1, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	23c0      	movs	r3, #192	; 0xc0
 8002d2a:	039b      	lsls	r3, r3, #14
 8002d2c:	401a      	ands	r2, r3
 8002d2e:	4b2c      	ldr	r3, [pc, #176]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d30:	430a      	orrs	r2, r1
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d36:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	23c0      	movs	r3, #192	; 0xc0
 8002d3e:	029b      	lsls	r3, r3, #10
 8002d40:	401a      	ands	r2, r3
 8002d42:	4b27      	ldr	r3, [pc, #156]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d44:	430a      	orrs	r2, r1
 8002d46:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d48:	2317      	movs	r3, #23
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d105      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d52:	4b23      	ldr	r3, [pc, #140]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d56:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d58:	4927      	ldr	r1, [pc, #156]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002d5a:	400a      	ands	r2, r1
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2202      	movs	r2, #2
 8002d64:	4013      	ands	r3, r2
 8002d66:	d009      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d68:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6c:	220c      	movs	r2, #12
 8002d6e:	4393      	bics	r3, r2
 8002d70:	0019      	movs	r1, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2204      	movs	r2, #4
 8002d82:	4013      	ands	r3, r2
 8002d84:	d009      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d86:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8a:	4a1c      	ldr	r2, [pc, #112]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	0019      	movs	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002d96:	430a      	orrs	r2, r1
 8002d98:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2208      	movs	r2, #8
 8002da0:	4013      	ands	r3, r2
 8002da2:	d009      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002da4:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da8:	4a15      	ldr	r2, [pc, #84]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	0019      	movs	r1, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002db4:	430a      	orrs	r2, r1
 8002db6:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2280      	movs	r2, #128	; 0x80
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d009      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002dc2:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc6:	4a0f      	ldr	r2, [pc, #60]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	0019      	movs	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	4b03      	ldr	r3, [pc, #12]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	0018      	movs	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b006      	add	sp, #24
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40007000 	.word	0x40007000
 8002de8:	fffcffff 	.word	0xfffcffff
 8002dec:	fff7ffff 	.word	0xfff7ffff
 8002df0:	00001388 	.word	0x00001388
 8002df4:	ffcfffff 	.word	0xffcfffff
 8002df8:	efffffff 	.word	0xefffffff
 8002dfc:	fffff3ff 	.word	0xfffff3ff
 8002e00:	ffffcfff 	.word	0xffffcfff
 8002e04:	fff3ffff 	.word	0xfff3ffff

08002e08 <__libc_init_array>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	2600      	movs	r6, #0
 8002e0c:	4d0c      	ldr	r5, [pc, #48]	; (8002e40 <__libc_init_array+0x38>)
 8002e0e:	4c0d      	ldr	r4, [pc, #52]	; (8002e44 <__libc_init_array+0x3c>)
 8002e10:	1b64      	subs	r4, r4, r5
 8002e12:	10a4      	asrs	r4, r4, #2
 8002e14:	42a6      	cmp	r6, r4
 8002e16:	d109      	bne.n	8002e2c <__libc_init_array+0x24>
 8002e18:	2600      	movs	r6, #0
 8002e1a:	f000 f821 	bl	8002e60 <_init>
 8002e1e:	4d0a      	ldr	r5, [pc, #40]	; (8002e48 <__libc_init_array+0x40>)
 8002e20:	4c0a      	ldr	r4, [pc, #40]	; (8002e4c <__libc_init_array+0x44>)
 8002e22:	1b64      	subs	r4, r4, r5
 8002e24:	10a4      	asrs	r4, r4, #2
 8002e26:	42a6      	cmp	r6, r4
 8002e28:	d105      	bne.n	8002e36 <__libc_init_array+0x2e>
 8002e2a:	bd70      	pop	{r4, r5, r6, pc}
 8002e2c:	00b3      	lsls	r3, r6, #2
 8002e2e:	58eb      	ldr	r3, [r5, r3]
 8002e30:	4798      	blx	r3
 8002e32:	3601      	adds	r6, #1
 8002e34:	e7ee      	b.n	8002e14 <__libc_init_array+0xc>
 8002e36:	00b3      	lsls	r3, r6, #2
 8002e38:	58eb      	ldr	r3, [r5, r3]
 8002e3a:	4798      	blx	r3
 8002e3c:	3601      	adds	r6, #1
 8002e3e:	e7f2      	b.n	8002e26 <__libc_init_array+0x1e>
 8002e40:	08002e9c 	.word	0x08002e9c
 8002e44:	08002e9c 	.word	0x08002e9c
 8002e48:	08002e9c 	.word	0x08002e9c
 8002e4c:	08002ea0 	.word	0x08002ea0

08002e50 <memset>:
 8002e50:	0003      	movs	r3, r0
 8002e52:	1882      	adds	r2, r0, r2
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d100      	bne.n	8002e5a <memset+0xa>
 8002e58:	4770      	bx	lr
 8002e5a:	7019      	strb	r1, [r3, #0]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	e7f9      	b.n	8002e54 <memset+0x4>

08002e60 <_init>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e66:	bc08      	pop	{r3}
 8002e68:	469e      	mov	lr, r3
 8002e6a:	4770      	bx	lr

08002e6c <_fini>:
 8002e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e72:	bc08      	pop	{r3}
 8002e74:	469e      	mov	lr, r3
 8002e76:	4770      	bx	lr
